{
 "runs":[
  {
   "tool":{
    "driver":{
     "name":"torch.onnx.dynamo_export",
     "contents":[
      "localizedData",
      "nonLocalizedData"
     ],
     "language":"en-US",
     "rules":[
      {
       "id":"FXE0007",
       "fullDescription":{
        "text":"Transforms graph from FX IR to ONNX IR.",
        "markdown":"This diagnostic tracks the transformation process from an FX Graph (in FX IR) to an ONNX Graph (in ONNX IR).\n\n## Key Representations:\n\n- **FX Graph**: The graph in FX IR produced by dynamo or symbolic tracing.\n- **ONNX Graph**: The graph in ONNX IR and [operators](https://onnx.ai/onnx/operators/).\n\n## Additional Notes:\n\n- Prior to this transformation step, the FX graph undergoes preprocessing through multiple FX passes.\n  To gain insight into these transformations, refer to diagnostic `FXE0010`.\n- To enable a detailed view of the graph transformation in progress within this diagnostic, switch to the DEBUG mode.\n\n  - Set DiagnosticOptions.verbosity_level to logging.DEBUG.\n  - Activate the environment variable TORCH_LOGS='onnx_diagnostics'.\n\n- For specific information related to node-level FX to ONNX transformations, explore the diagnostic `FXE0008`.\n"
       },
       "name":"fx-graph-to-onnx",
       "shortDescription":{
        "text":"Transforms graph from FX IR to ONNX IR."
       }
      },
      {
       "id":"FXE0008",
       "fullDescription":{
        "text":"Transforms an FX node to an ONNX node.",
        "markdown":"This diagnostic tracks the transformation process from an FX Node to ONNX [Operators](https://onnx.ai/onnx/operators/).\n\nThe process of converting FX Node to ONNX Node involves dealing with six distinct node types:\n  1. `placeholder`: Represents a module input, maps to an ONNX graph input.\n  2. `call_module`: Symbolizes a call to a submodule, maps to an ONNX\n  3. `call_method`: Symbolizes a method call. Not yet implemented.\n  4. `call_function`: Symbolizes a function call. [Core ATen](https://pytorch.org/docs/stable/ir.html#core-aten-ir) is expected\n    as the function call target. The mapping from ATen to ONNX is implemented by [ONNXScript torchlib](https://github.com/microsoft/onnxscript/tree/main/onnxscript/function_libs/torch_lib/ops).\n    This [guide](https://pytorch.org/docs/stable/onnx.html#onnx-script-functions) shows how to write and register a custom symbolic function for call_function FX node.\n  5. `get_attr`: Indicates an attribute access within the current module. Maps to an ONNX graph initializer.\n  6. `output`: Represents the module's output. Maps to an ONNX graph output.\n\nFor a granular understanding of how each node type is transformed, refer to the implementation details in `FxOnnxInterpreter`.\n"
       },
       "name":"fx-node-to-onnx",
       "shortDescription":{
        "text":"Transforms an FX node to an ONNX node."
       }
      },
      {
       "id":"FXE0016",
       "fullDescription":{
        "text":"This rule involves finding the list of OnnxFunction for the PyTorch operator overload in the ONNX registry. If the operator overload is not supported but its default overload is, a warning will be issued. If both the operator overload and its default overload are not supported, an error will be issued.",
        "markdown":"The operator overload name serves the purpose of verifying whether a PyTorch operator is registered in the ONNX registry.\nIf it's not found, the dispatcher takes a fallback approach and tries to locate the default overload of the PyTorch\noperator in the registry. If even the default overload is absent, it signifies that the operator is officially unsupported.\n\nThere are three types of level that can be triggered in this rule:\n\n1. NOTE: The op overload is supported.\n2. WARNING: The op overload is not supported, but it's default overload is supported.\n3. ERROR: The op overload is not supported, and it's default overload is also not supported.\n\nHere are some suggestions based on the WARNING situation:\n\n1. If there are NO errors or mismatches in the results, it is safe to disregard this warning.\n2. If there are errors or mismatches in the results, it is recommended to:\n  (a) Enable op_level_debugging to determine if the OnnxFunction might be incorrect.\n  (b) Report the unsupported overload to the PyTorch-ONNX team.\n  (c) Create/register a custom symbolic function to replace the default one.\n\nHere are some suggestions based on the ERROR situation:\n\n1. Report the unsupported operator to the PyTorch-ONNX team.\n2. Create/register a custom symbolic function to replace the default one.\n"
       },
       "name":"find-operator-overloads-in-onnx-registry",
       "shortDescription":{
        "text":"Find the list of OnnxFunction of the PyTorch operator in onnx registry."
       }
      },
      {
       "id":"FXE0015",
       "fullDescription":{
        "text":"Determine if type promotion is required for the FX node. Insert cast nodes if needed.",
        "markdown":"This diagnostic monitors the node-level type promotion insertion process. In PyTorch, there is an automatic process called implicit type promotion,\nwhere the input types of an operator are promoted to a common type. The determination of the common type is based on the type promotion rule specific to each operator.\nTo learn more about PyTorch's type promotion rules, refer to the [elementwise_dtypes doc](https://github.com/pytorch/pytorch/blob/f044613f78df713fb57f70c608483c9f10ad332e/torch/_prims_common/__init__.py#L1252-L1335)\nand [torch._refs ops](https://github.com/pytorch/pytorch/blob/a475ea4542dfe961c9d097e33ab5041f61c8c17f/torch/_refs/__init__.py#L484).\n\nHowever, implicit type promotion is not supported in ONNX. Therefore, to replicate the PyTorch behavior, we need to explicitly insert cast nodes.\nThis diagnostic tracks the process of node-level type promotion insertion.\n\nThe type promotion rules used by this process can be found in `torch/onnx/_internal/fx/passes/type_promotion.py.`\nTo update or add new type promotion rules, please refer to the [Note: Update type promotion rule] section.\n"
       },
       "name":"fx-node-insert-type-promotion",
       "shortDescription":{
        "text":"Determine if type promotion is required for the FX node. Insert cast nodes if needed."
       }
      },
      {
       "id":"FXE0014",
       "fullDescription":{
        "text":"Find the OnnxFunction that matches the input dtypes by comparing them with their opschemas. A warning will be issued if the matched OnnxFunction is not an exact match.",
        "markdown":"When an ATen/Custom operator is registered and needs to be dispatched to an OnnxFunction, the input/attribute\ndtypes of the ATen/Custom operator are compared with the input/attribute dtypes of the OnnxFunction opschemas\nto find a match. However, if a perfect/exact match is not found, the dispatcher will attempt to find\nthe nearest match with the highest number of input/attribute dtypes matching the OnnxFunction opschemas, while\nissuing a warning.\n\nThere are two types of level that can be triggered in this rule:\n\n1. NOTE: A perfect match is found, and no warning is issued.\n2. WARNING: The matched OnnxFunction is not a perfect/exact match.\n\nHere are some suggestions based on the WARNING situation:\n\n1. If there are NO errors or mismatches in the results, it is safe to disregard this warning,\n  as the definition of OnnxFunction schema is usually more stringent.\n2. If there are errors or mismatches in the results, it is recommended to:\n  (a) Enable op_level_debugging to determine if the OnnxFunction might be incorrect.\n  (b) Report the issue to the PyTorch-ONNX team.\n  (c) Create/register a custom symbolic function to replace the default one.\n"
       },
       "name":"find-opschema-matched-symbolic-function",
       "shortDescription":{
        "text":"Find the OnnxFunction that matches the input/attribute dtypes by comparing them with their opschemas."
       }
      },
      {
       "id":"FXE0010",
       "fullDescription":{
        "text":"FX graph transformation during ONNX export before converting from FX IR to ONNX IR.",
        "markdown":"This diagnostic tracks the FX passes executed during the ONNX export process prior\nto converting from FX IR (Intermediate Representation) to ONNX IR.\n\nUnder the scope of ONNX export, an FX pass refers to a specific transformation applied to the FX GraphModule.\nThe primary aim of these passes is to streamline the graph into a format that aligns more with the ONNX IR.\nMoreover, these passes work to substitute unsupported FX IR features with those recognized and endorsed by\nONNX IR. Common transformations include, but aren't limited to, decomposition, functionalization and\ntype promotion.\n\nFor those who are interested in a comprehensive log detailing the modifications made during these passes,\nthere are a couple of options:\n\n- Set DiagnosticOptions.verbosity_level to logging.DEBUG.\n- Activate the environment variable TORCH_LOGS='onnx_diagnostics'.\n\nHowever, it's noteworthy that by default, such detailed logging is turned off. The primary reason being\nits considerable impact on performance.\n\nFor an in-depth understanding of each specific pass, please refer to the directory: torch/onnx/_internal/fx/passes.\n"
       },
       "name":"fx-pass",
       "shortDescription":{
        "text":"FX graph transformation during ONNX export before converting from FX IR to ONNX IR."
       }
      }
     ],
     "version":"2.6.0.dev20241013+cpu"
    }
   },
   "language":"en-US",
   "newlineSequences":[
    "\r\n",
    "\n"
   ],
   "results":[
    {
     "message":{
      "markdown":"Running Decompose pass. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature Transform.run\n- self: <class 'torch.onnx._internal.fx.passes.decomp.Decompose'>\n- args: Tuple[length=1](\nTensor(f32[512, 100, 7]),\n)\nFor detailed logging of graph modifications by this pass, either set `DiagnosticOptions.verbosity_level` to `logging.DEBUG` or use the environment variable `TORCH_LOGS='onnx_diagnostics'`.\n## Return values\ntorch.fx.GraphModule(<lambda>)",
      "text":"Running Decompose pass. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"Transform.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/_pass.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":240
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0010",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Running Functionalize pass. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature Transform.run\n- self: <class 'torch.onnx._internal.fx.passes.functionalization.Functionalize'>\n- args: Tuple[length=1](\nTensor(f32[512, 100, 7]),\n)\nFor detailed logging of graph modifications by this pass, either set `DiagnosticOptions.verbosity_level` to `logging.DEBUG` or use the environment variable `TORCH_LOGS='onnx_diagnostics'`.\n## Return values\ntorch.fx.GraphModule(<lambda>)",
      "text":"Running Functionalize pass. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"Transform.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/_pass.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":240
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0010",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Running RemoveInputMutation pass. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature Transform.run\n- self: <class 'torch.onnx._internal.fx.passes.functionalization.RemoveInputMutation'>\n- args: Tuple[length=1](\nTensor(f32[512, 100, 7]),\n)\nFor detailed logging of graph modifications by this pass, either set `DiagnosticOptions.verbosity_level` to `logging.DEBUG` or use the environment variable `TORCH_LOGS='onnx_diagnostics'`.\n## Return values\ntorch.fx.GraphModule(<lambda>)",
      "text":"Running RemoveInputMutation pass. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"Transform.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/_pass.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":240
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0010",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped l_x_: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(arg0)[placeholder]:Tensor(f32[512, 100, 7])\n## Return values\nTensor(f32[512, 100, 7])",
      "text":"Skipped l_x_: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant0: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant0)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 100, 7]))",
      "text":"Skipped _param_constant0: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant1: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant1)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant1: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant2: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant2)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant2: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant3: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant3)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant3: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)",
      "text":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant4: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant4)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 1, 7]))",
      "text":"Skipped _param_constant4: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant5: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant5)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant5: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant6: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant6)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant6: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant7: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant7)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant7: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)",
      "text":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n## Return values\nTensor(f32[3584, 512])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant8: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant8)[get_attr]:None\n## Return values\nParameter(Tensor(f32[1536, 512]))",
      "text":"Skipped _param_constant8: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n## Return values\nTensor(f32[512, 1536])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant9: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant9)[get_attr]:None\n## Return values\nParameter(Tensor(f32[1536]))",
      "text":"Skipped _param_constant9: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n## Return values\nTensor(f32[3584, 1536])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n## Return values\nTensor(f32[512, 7, 1536])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for gelu. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'gelu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument view_1 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 7, 1536])",
      "text":"Type promotion not needed for gelu. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n## Return values\nTensor(f32[3584, 1536])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant10: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant10)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 1536]))",
      "text":"Skipped _param_constant10: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n## Return values\nTensor(f32[1536, 512])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant11: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant11)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant11: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n## Return values\nTensor(f32[3584, 512])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant12: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant12)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant12: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument _param_constant12 is not promoted. Already torch.float32.\nArgument view_3 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Type promotion not needed for mul. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument transpose_1 is not promoted. Already torch.float32.\nArgument transpose_3 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Type promotion not needed for add. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant13: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant13)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 1, 7]))",
      "text":"Skipped _param_constant13: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant14: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant14)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant14: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant15: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant15)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant15: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant16: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant16)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant16: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)",
      "text":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n## Return values\nTensor(f32[3584, 512])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant17: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant17)[get_attr]:None\n## Return values\nParameter(Tensor(f32[1536, 512]))",
      "text":"Skipped _param_constant17: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n## Return values\nTensor(f32[512, 1536])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant18: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant18)[get_attr]:None\n## Return values\nParameter(Tensor(f32[1536]))",
      "text":"Skipped _param_constant18: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n## Return values\nTensor(f32[3584, 1536])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n## Return values\nTensor(f32[512, 7, 1536])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for gelu_1. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'gelu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument view_5 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 7, 1536])",
      "text":"Type promotion not needed for gelu_1. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n## Return values\nTensor(f32[3584, 1536])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant19: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant19)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 1536]))",
      "text":"Skipped _param_constant19: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n## Return values\nTensor(f32[1536, 512])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant20: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant20)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant20: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n## Return values\nTensor(f32[3584, 512])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant21: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant21)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant21: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_1. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument _param_constant21 is not promoted. Already torch.float32.\nArgument view_7 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Type promotion not needed for mul_1. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add_1. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument add is not promoted. Already torch.float32.\nArgument transpose_5 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Type promotion not needed for add_1. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant22: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant22)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 1, 7]))",
      "text":"Skipped _param_constant22: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant23: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant23)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant23: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant24: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant24)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant24: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant25: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant25)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant25: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)",
      "text":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n## Return values\nTensor(f32[3584, 512])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant26: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant26)[get_attr]:None\n## Return values\nParameter(Tensor(f32[1536, 512]))",
      "text":"Skipped _param_constant26: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n## Return values\nTensor(f32[512, 1536])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant27: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant27)[get_attr]:None\n## Return values\nParameter(Tensor(f32[1536]))",
      "text":"Skipped _param_constant27: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n## Return values\nTensor(f32[3584, 1536])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n## Return values\nTensor(f32[512, 7, 1536])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for gelu_2. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'gelu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument view_9 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 7, 1536])",
      "text":"Type promotion not needed for gelu_2. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n## Return values\nTensor(f32[3584, 1536])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant28: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant28)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 1536]))",
      "text":"Skipped _param_constant28: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n## Return values\nTensor(f32[1536, 512])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant29: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant29)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant29: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n## Return values\nTensor(f32[3584, 512])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant30: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant30)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant30: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_2. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument _param_constant30 is not promoted. Already torch.float32.\nArgument view_11 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Type promotion not needed for mul_2. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add_2. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument add_1 is not promoted. Already torch.float32.\nArgument transpose_7 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Type promotion not needed for add_2. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant31: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant31)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 1, 7]))",
      "text":"Skipped _param_constant31: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant32: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant32)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant32: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant33: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant33)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant33: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant34: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant34)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant34: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)",
      "text":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n## Return values\nTensor(f32[3584, 512])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant35: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant35)[get_attr]:None\n## Return values\nParameter(Tensor(f32[1536, 512]))",
      "text":"Skipped _param_constant35: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n## Return values\nTensor(f32[512, 1536])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant36: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant36)[get_attr]:None\n## Return values\nParameter(Tensor(f32[1536]))",
      "text":"Skipped _param_constant36: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n## Return values\nTensor(f32[3584, 1536])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n## Return values\nTensor(f32[512, 7, 1536])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for gelu_3. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'gelu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument view_13 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 7, 1536])",
      "text":"Type promotion not needed for gelu_3. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n## Return values\nTensor(f32[3584, 1536])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant37: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant37)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 1536]))",
      "text":"Skipped _param_constant37: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n## Return values\nTensor(f32[1536, 512])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant38: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant38)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant38: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n## Return values\nTensor(f32[3584, 512])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant39: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant39)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant39: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_3. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument _param_constant39 is not promoted. Already torch.float32.\nArgument view_15 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Type promotion not needed for mul_3. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add_3. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument add_2 is not promoted. Already torch.float32.\nArgument transpose_9 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Type promotion not needed for add_3. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant40: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant40)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 1, 7]))",
      "text":"Skipped _param_constant40: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant41: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant41)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant41: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant42: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant42)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant42: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant43: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant43)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant43: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)",
      "text":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n## Return values\nTensor(f32[3584, 512])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant44: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant44)[get_attr]:None\n## Return values\nParameter(Tensor(f32[1536, 512]))",
      "text":"Skipped _param_constant44: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n## Return values\nTensor(f32[512, 1536])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant45: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant45)[get_attr]:None\n## Return values\nParameter(Tensor(f32[1536]))",
      "text":"Skipped _param_constant45: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n## Return values\nTensor(f32[3584, 1536])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n## Return values\nTensor(f32[512, 7, 1536])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for gelu_4. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'gelu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument view_17 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 7, 1536])",
      "text":"Type promotion not needed for gelu_4. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n## Return values\nTensor(f32[3584, 1536])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant46: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant46)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 1536]))",
      "text":"Skipped _param_constant46: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n## Return values\nTensor(f32[1536, 512])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant47: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant47)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant47: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n## Return values\nTensor(f32[3584, 512])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant48: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant48)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant48: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_4. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument _param_constant48 is not promoted. Already torch.float32.\nArgument view_19 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Type promotion not needed for mul_4. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add_4. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument add_3 is not promoted. Already torch.float32.\nArgument transpose_11 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Type promotion not needed for add_4. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant49: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant49)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 1, 7]))",
      "text":"Skipped _param_constant49: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant50: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant50)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant50: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant51: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant51)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant51: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant52: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant52)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant52: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)",
      "text":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n## Return values\nTensor(f32[3584, 512])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant53: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant53)[get_attr]:None\n## Return values\nParameter(Tensor(f32[1536, 512]))",
      "text":"Skipped _param_constant53: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n## Return values\nTensor(f32[512, 1536])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant54: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant54)[get_attr]:None\n## Return values\nParameter(Tensor(f32[1536]))",
      "text":"Skipped _param_constant54: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n## Return values\nTensor(f32[3584, 1536])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n## Return values\nTensor(f32[512, 7, 1536])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for gelu_5. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'gelu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument view_21 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 7, 1536])",
      "text":"Type promotion not needed for gelu_5. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n## Return values\nTensor(f32[3584, 1536])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant55: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant55)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 1536]))",
      "text":"Skipped _param_constant55: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n## Return values\nTensor(f32[1536, 512])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant56: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant56)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant56: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n## Return values\nTensor(f32[3584, 512])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant57: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant57)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant57: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_5. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument _param_constant57 is not promoted. Already torch.float32.\nArgument view_23 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Type promotion not needed for mul_5. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add_5. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument add_4 is not promoted. Already torch.float32.\nArgument transpose_13 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Type promotion not needed for add_5. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant58: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant58)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 1, 7]))",
      "text":"Skipped _param_constant58: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant59: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant59)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant59: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant60: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant60)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant60: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant61: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant61)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant61: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)",
      "text":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n## Return values\nTensor(f32[3584, 512])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant62: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant62)[get_attr]:None\n## Return values\nParameter(Tensor(f32[1536, 512]))",
      "text":"Skipped _param_constant62: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n## Return values\nTensor(f32[512, 1536])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant63: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant63)[get_attr]:None\n## Return values\nParameter(Tensor(f32[1536]))",
      "text":"Skipped _param_constant63: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n## Return values\nTensor(f32[3584, 1536])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n## Return values\nTensor(f32[512, 7, 1536])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for gelu_6. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'gelu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument view_25 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 7, 1536])",
      "text":"Type promotion not needed for gelu_6. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n## Return values\nTensor(f32[3584, 1536])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant64: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant64)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 1536]))",
      "text":"Skipped _param_constant64: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n## Return values\nTensor(f32[1536, 512])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant65: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant65)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant65: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n## Return values\nTensor(f32[3584, 512])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant66: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant66)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant66: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_6. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument _param_constant66 is not promoted. Already torch.float32.\nArgument view_27 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Type promotion not needed for mul_6. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add_6. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument add_5 is not promoted. Already torch.float32.\nArgument transpose_15 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Type promotion not needed for add_6. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant67: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant67)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 1, 7]))",
      "text":"Skipped _param_constant67: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant68: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant68)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant68: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant69: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant69)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant69: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant70: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant70)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant70: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)",
      "text":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n## Return values\nTensor(f32[3584, 512])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant71: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant71)[get_attr]:None\n## Return values\nParameter(Tensor(f32[1536, 512]))",
      "text":"Skipped _param_constant71: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n## Return values\nTensor(f32[512, 1536])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant72: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant72)[get_attr]:None\n## Return values\nParameter(Tensor(f32[1536]))",
      "text":"Skipped _param_constant72: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n## Return values\nTensor(f32[3584, 1536])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n## Return values\nTensor(f32[512, 7, 1536])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for gelu_7. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'gelu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument view_29 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 7, 1536])",
      "text":"Type promotion not needed for gelu_7. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n## Return values\nTensor(f32[3584, 1536])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant73: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant73)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 1536]))",
      "text":"Skipped _param_constant73: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n## Return values\nTensor(f32[1536, 512])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant74: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant74)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant74: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n## Return values\nTensor(f32[3584, 512])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant75: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant75)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant75: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_7. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument _param_constant75 is not promoted. Already torch.float32.\nArgument view_31 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Type promotion not needed for mul_7. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add_7. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument add_6 is not promoted. Already torch.float32.\nArgument transpose_17 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 512, 7])",
      "text":"Type promotion not needed for add_7. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant76: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant76)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant76: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant77: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant77)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant77: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)",
      "text":"Skipped for fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n): Cannot find type promotion rule for op: aten.native_layer_norm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n## Return values\nTensor(f32[512, 7, 512])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1])\n## Return values\nTensor(f32[512, 7, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n## Return values\nTensor(f32[3584, 512])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant78: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant78)[get_attr]:None\n## Return values\nParameter(Tensor(f32[1026, 512]))",
      "text":"Skipped _param_constant78: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1026]): Cannot find type promotion rule for op: aten.t.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1026])\n## Return values\nTensor(f32[512, 1026])",
      "text":"Skipped for fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1026]): Cannot find type promotion rule for op: aten.t.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant79: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant79)[get_attr]:None\n## Return values\nParameter(Tensor(f32[1026]))",
      "text":"Skipped _param_constant79: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1026]): Cannot find type promotion rule for op: aten.addmm.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1026])\n## Return values\nTensor(f32[3584, 1026])",
      "text":"Skipped for fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1026]): Cannot find type promotion rule for op: aten.addmm.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1026]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1026])\n## Return values\nTensor(f32[512, 7, 1026])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1026]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 1026, 7]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 1026, 7])\n## Return values\nTensor(f32[512, 1026, 7])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 1026, 7]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.split.Tensor)[call_function]:List[length=2](\nTensor(f32[512, 513, 7]),\nTensor(f32[512, 513, 7]),\n): Cannot find type promotion rule for op: aten.split.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.split.Tensor)[call_function]:List[length=2](\nTensor(f32[512, 513, 7]),\nTensor(f32[512, 513, 7]),\n)\n## Return values\nList[length=2](\nTensor(f32[512, 513, 7]),\nTensor(f32[512, 513, 7]),\n)",
      "text":"Skipped for fx.Node(aten.split.Tensor)[call_function]:List[length=2](\nTensor(f32[512, 513, 7]),\nTensor(f32[512, 513, 7]),\n): Cannot find type promotion rule for op: aten.split.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 513, 7]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 513, 7])\n## Return values\nTensor(f32[512, 513, 7])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 513, 7]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 513, 7]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 513, 7])\n## Return values\nTensor(f32[512, 513, 7])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 513, 7]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for exp. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.exp.default)[call_function]:Tensor(f32[512, 513, 7])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'exp', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.INT_TO_FLOAT)\nArgument getitem_30 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 513, 7])",
      "text":"Type promotion not needed for exp. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for clamp. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.clamp.default)[call_function]:Tensor(f32[512, 513, 7])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'clamp', [0, 1, 2], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument exp is not promoted. Already torch.float32.\nArgument None is not promoted. Not mentioned by type promotion rule.\nArgument 100.0 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 513, 7])",
      "text":"Type promotion not needed for clamp. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for cos. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.cos.default)[call_function]:Tensor(f32[512, 513, 7])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'cos', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.INT_TO_FLOAT)\nArgument getitem_31 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 513, 7])",
      "text":"Type promotion not needed for cos. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for sin. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sin.default)[call_function]:Tensor(f32[512, 513, 7])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'sin', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.INT_TO_FLOAT)\nArgument getitem_31 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 513, 7])",
      "text":"Type promotion not needed for sin. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Applied type promotion for mul_8. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(c64[512, 513, 7])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument sin(torch.float32) is promoted to torch.complex64.\nArgument 1j is not promoted. Already torch.complex64.\n## Return values\nTensor(c64[512, 513, 7])",
      "text":"Applied type promotion for mul_8. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Applied type promotion for add_8. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(c64[512, 513, 7])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument cos(torch.float32) is promoted to torch.complex64.\nArgument mul_8 is not promoted. Already torch.complex64.\n## Return values\nTensor(c64[512, 513, 7])",
      "text":"Applied type promotion for add_8. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Applied type promotion for mul_9. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(c64[512, 513, 7])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument clamp(torch.float32) is promoted to torch.complex64.\nArgument add_8 is not promoted. Already torch.complex64.\n## Return values\nTensor(c64[512, 513, 7])",
      "text":"Applied type promotion for mul_9. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(c64[512, 7, 513]): Cannot find type promotion rule for op: aten.transpose.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(c64[512, 7, 513])\n## Return values\nTensor(c64[512, 7, 513])",
      "text":"Skipped for fx.Node(aten.transpose.int)[call_function]:Tensor(c64[512, 7, 513]): Cannot find type promotion rule for op: aten.transpose.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._fft_c2r.default)[call_function]:Tensor(f32[512, 7, 1024]): Cannot find type promotion rule for op: aten._fft_c2r.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._fft_c2r.default)[call_function]:Tensor(f32[512, 7, 1024])\n## Return values\nTensor(f32[512, 7, 1024])",
      "text":"Skipped for fx.Node(aten._fft_c2r.default)[call_function]:Tensor(f32[512, 7, 1024]): Cannot find type promotion rule for op: aten._fft_c2r.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant0: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant0)[get_attr]:None\n## Return values\nTensor(f32[1024])",
      "text":"Skipped _tensor_constant0: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[1, 1, 1024]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[1, 1, 1024])\n## Return values\nTensor(f32[1, 1, 1024])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[1, 1, 1024]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_10. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 1024])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument _fft_c2r is not promoted. Already torch.float32.\nArgument view_34 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 7, 1024])",
      "text":"Type promotion not needed for mul_10. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.arange.default)[call_function]:Tensor(i32[2560]): Cannot find type promotion rule for op: aten.arange.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.arange.default)[call_function]:Tensor(i32[2560])\n## Return values\nTensor(i32[2560])",
      "text":"Skipped for fx.Node(aten.arange.default)[call_function]:Tensor(i32[2560]): Cannot find type promotion rule for op: aten.arange.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.unfold.default)[call_function]:Tensor(i32[7, 1024]): Cannot find type promotion rule for op: aten.unfold.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.unfold.default)[call_function]:Tensor(i32[7, 1024])\n## Return values\nTensor(i32[7, 1024])",
      "text":"Skipped for fx.Node(aten.unfold.default)[call_function]:Tensor(i32[7, 1024]): Cannot find type promotion rule for op: aten.unfold.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.clone.default)[call_function]:Tensor(i32[7, 1024]): Cannot find type promotion rule for op: aten.clone.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.clone.default)[call_function]:Tensor(i32[7, 1024])\n## Return values\nTensor(i32[7, 1024])",
      "text":"Skipped for fx.Node(aten.clone.default)[call_function]:Tensor(i32[7, 1024]): Cannot find type promotion rule for op: aten.clone.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._unsafe_view.default)[call_function]:Tensor(i32[7168]): Cannot find type promotion rule for op: aten._unsafe_view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._unsafe_view.default)[call_function]:Tensor(i32[7168])\n## Return values\nTensor(i32[7168])",
      "text":"Skipped for fx.Node(aten._unsafe_view.default)[call_function]:Tensor(i32[7168]): Cannot find type promotion rule for op: aten._unsafe_view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.permute.default)[call_function]:Tensor(f32[512, 7, 1024]): Cannot find type promotion rule for op: aten.permute.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.permute.default)[call_function]:Tensor(f32[512, 7, 1024])\n## Return values\nTensor(f32[512, 7, 1024])",
      "text":"Skipped for fx.Node(aten.permute.default)[call_function]:Tensor(f32[512, 7, 1024]): Cannot find type promotion rule for op: aten.permute.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7168]): Cannot find type promotion rule for op: aten.view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7168])\n## Return values\nTensor(f32[512, 7168])",
      "text":"Skipped for fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7168]): Cannot find type promotion rule for op: aten.view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.new_zeros.default)[call_function]:Tensor(f32[512, 2560]): Cannot find type promotion rule for op: aten.new_zeros.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.new_zeros.default)[call_function]:Tensor(f32[512, 2560])\n## Return values\nTensor(f32[512, 2560])",
      "text":"Skipped for fx.Node(aten.new_zeros.default)[call_function]:Tensor(f32[512, 2560]): Cannot find type promotion rule for op: aten.new_zeros.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._unsafe_index_put.default)[call_function]:Tensor(f32[512, 2560]): Cannot find type promotion rule for op: aten._unsafe_index_put.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._unsafe_index_put.default)[call_function]:Tensor(f32[512, 2560])\n## Return values\nTensor(f32[512, 2560])",
      "text":"Skipped for fx.Node(aten._unsafe_index_put.default)[call_function]:Tensor(f32[512, 2560]): Cannot find type promotion rule for op: aten._unsafe_index_put.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant0_1: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant0)[get_attr]:None\n## Return values\nTensor(f32[1024])",
      "text":"Skipped _tensor_constant0_1: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Applied type promotion for pow_1. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.pow.Tensor_Scalar)[call_function]:Tensor(f32[1024])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'pow', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.BOOL_TO_LONG)\nArgument _tensor_constant0_1 is not promoted. Already torch.float32.\nArgument 2(Scalar of equivalent dtype: torch.int64) is promoted to torch.float32.\n## Return values\nTensor(f32[1024])",
      "text":"Applied type promotion for pow_1. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.expand.default)[call_function]:Tensor(f32[1, 7, 1024]): Cannot find type promotion rule for op: aten.expand.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.expand.default)[call_function]:Tensor(f32[1, 7, 1024])\n## Return values\nTensor(f32[1, 7, 1024])",
      "text":"Skipped for fx.Node(aten.expand.default)[call_function]:Tensor(f32[1, 7, 1024]): Cannot find type promotion rule for op: aten.expand.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.arange.default)[call_function]:Tensor(i32[2560]): Cannot find type promotion rule for op: aten.arange.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.arange.default)[call_function]:Tensor(i32[2560])\n## Return values\nTensor(i32[2560])",
      "text":"Skipped for fx.Node(aten.arange.default)[call_function]:Tensor(i32[2560]): Cannot find type promotion rule for op: aten.arange.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.unfold.default)[call_function]:Tensor(i32[7, 1024]): Cannot find type promotion rule for op: aten.unfold.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.unfold.default)[call_function]:Tensor(i32[7, 1024])\n## Return values\nTensor(i32[7, 1024])",
      "text":"Skipped for fx.Node(aten.unfold.default)[call_function]:Tensor(i32[7, 1024]): Cannot find type promotion rule for op: aten.unfold.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.clone.default)[call_function]:Tensor(i32[7, 1024]): Cannot find type promotion rule for op: aten.clone.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.clone.default)[call_function]:Tensor(i32[7, 1024])\n## Return values\nTensor(i32[7, 1024])",
      "text":"Skipped for fx.Node(aten.clone.default)[call_function]:Tensor(i32[7, 1024]): Cannot find type promotion rule for op: aten.clone.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._unsafe_view.default)[call_function]:Tensor(i32[7168]): Cannot find type promotion rule for op: aten._unsafe_view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._unsafe_view.default)[call_function]:Tensor(i32[7168])\n## Return values\nTensor(i32[7168])",
      "text":"Skipped for fx.Node(aten._unsafe_view.default)[call_function]:Tensor(i32[7168]): Cannot find type promotion rule for op: aten._unsafe_view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.permute.default)[call_function]:Tensor(f32[1, 7, 1024]): Cannot find type promotion rule for op: aten.permute.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.permute.default)[call_function]:Tensor(f32[1, 7, 1024])\n## Return values\nTensor(f32[1, 7, 1024])",
      "text":"Skipped for fx.Node(aten.permute.default)[call_function]:Tensor(f32[1, 7, 1024]): Cannot find type promotion rule for op: aten.permute.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.clone.default)[call_function]:Tensor(f32[1, 7, 1024]): Cannot find type promotion rule for op: aten.clone.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.clone.default)[call_function]:Tensor(f32[1, 7, 1024])\n## Return values\nTensor(f32[1, 7, 1024])",
      "text":"Skipped for fx.Node(aten.clone.default)[call_function]:Tensor(f32[1, 7, 1024]): Cannot find type promotion rule for op: aten.clone.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._unsafe_view.default)[call_function]:Tensor(f32[1, 7168]): Cannot find type promotion rule for op: aten._unsafe_view.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._unsafe_view.default)[call_function]:Tensor(f32[1, 7168])\n## Return values\nTensor(f32[1, 7168])",
      "text":"Skipped for fx.Node(aten._unsafe_view.default)[call_function]:Tensor(f32[1, 7168]): Cannot find type promotion rule for op: aten._unsafe_view.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.new_zeros.default)[call_function]:Tensor(f32[512, 2560]): Cannot find type promotion rule for op: aten.new_zeros.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.new_zeros.default)[call_function]:Tensor(f32[512, 2560])\n## Return values\nTensor(f32[512, 2560])",
      "text":"Skipped for fx.Node(aten.new_zeros.default)[call_function]:Tensor(f32[512, 2560]): Cannot find type promotion rule for op: aten.new_zeros.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._unsafe_index_put.default)[call_function]:Tensor(f32[512, 2560]): Cannot find type promotion rule for op: aten._unsafe_index_put.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._unsafe_index_put.default)[call_function]:Tensor(f32[512, 2560])\n## Return values\nTensor(f32[512, 2560])",
      "text":"Skipped for fx.Node(aten._unsafe_index_put.default)[call_function]:Tensor(f32[512, 2560]): Cannot find type promotion rule for op: aten._unsafe_index_put.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[512, 1536])\n## Return values\nTensor(f32[512, 1536])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.slice.Tensor\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[512, 1536])\n## Return values\nTensor(f32[512, 1536])",
      "text":"Skipped for fx.Node(aten.slice.Tensor)[call_function]:Tensor(f32[512, 1536]): Cannot find type promotion rule for op: aten.slice.Tensor"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for div. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.div.Tensor)[call_function]:Tensor(f32[512, 1536])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'div', (0, 1), (), ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument slice_1 is not promoted. Already torch.float32.\nArgument slice_2 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[512, 1536])",
      "text":"Type promotion not needed for div. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped output: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(output)[output]:None\n## Return values\nList[length=1](\nTensor(f32[512, 1536]),\n)",
      "text":"Skipped output: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Running InsertTypePromotion pass. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature Transform.run\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion.InsertTypePromotion'>\nFor detailed logging of graph modifications by this pass, either set `DiagnosticOptions.verbosity_level` to `logging.DEBUG` or use the environment variable `TORCH_LOGS='onnx_diagnostics'`.\n## Return values\ntorch.fx.GraphModule(<lambda>)",
      "text":"Running InsertTypePromotion pass. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"Transform.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/_pass.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":240
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0010",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Running RestoreParameterAndBufferNames pass. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature Transform.run\n- self: <class 'torch.onnx._internal.fx.passes.readability.RestoreParameterAndBufferNames'>\nFor detailed logging of graph modifications by this pass, either set `DiagnosticOptions.verbosity_level` to `logging.DEBUG` or use the environment variable `TORCH_LOGS='onnx_diagnostics'`.\nRenamed 'self._param_constant0' to 'self.backbone/embed/weight', normalized from original parameter name 'backbone.embed.weight'.\nRenamed 'self._param_constant1' to 'self.backbone/embed/bias', normalized from original parameter name 'backbone.embed.bias'.\nRenamed 'self._param_constant2' to 'self.backbone/norm/weight', normalized from original parameter name 'backbone.norm.weight'.\nRenamed 'self._param_constant3' to 'self.backbone/norm/bias', normalized from original parameter name 'backbone.norm.bias'.\nRenamed 'self._param_constant4' to 'self.backbone/convnext/0/dwconv/weight', normalized from original parameter name 'backbone.convnext.0.dwconv.weight'.\nRenamed 'self._param_constant5' to 'self.backbone/convnext/0/dwconv/bias', normalized from original parameter name 'backbone.convnext.0.dwconv.bias'.\nRenamed 'self._param_constant6' to 'self.backbone/convnext/0/norm/weight', normalized from original parameter name 'backbone.convnext.0.norm.weight'.\nRenamed 'self._param_constant7' to 'self.backbone/convnext/0/norm/bias', normalized from original parameter name 'backbone.convnext.0.norm.bias'.\nRenamed 'self._param_constant8' to 'self.backbone/convnext/0/pwconv1/weight', normalized from original parameter name 'backbone.convnext.0.pwconv1.weight'.\nRenamed 'self._param_constant9' to 'self.backbone/convnext/0/pwconv1/bias', normalized from original parameter name 'backbone.convnext.0.pwconv1.bias'.\nRenamed 'self._param_constant10' to 'self.backbone/convnext/0/pwconv2/weight', normalized from original parameter name 'backbone.convnext.0.pwconv2.weight'.\nRenamed 'self._param_constant11' to 'self.backbone/convnext/0/pwconv2/bias', normalized from original parameter name 'backbone.convnext.0.pwconv2.bias'.\nRenamed 'self._param_constant12' to 'self.backbone/convnext/0/gamma', normalized from original parameter name 'backbone.convnext.0.gamma'.\nRenamed 'self._param_constant13' to 'self.backbone/convnext/1/dwconv/weight', normalized from original parameter name 'backbone.convnext.1.dwconv.weight'.\nRenamed 'self._param_constant14' to 'self.backbone/convnext/1/dwconv/bias', normalized from original parameter name 'backbone.convnext.1.dwconv.bias'.\nRenamed 'self._param_constant15' to 'self.backbone/convnext/1/norm/weight', normalized from original parameter name 'backbone.convnext.1.norm.weight'.\nRenamed 'self._param_constant16' to 'self.backbone/convnext/1/norm/bias', normalized from original parameter name 'backbone.convnext.1.norm.bias'.\nRenamed 'self._param_constant17' to 'self.backbone/convnext/1/pwconv1/weight', normalized from original parameter name 'backbone.convnext.1.pwconv1.weight'.\nRenamed 'self._param_constant18' to 'self.backbone/convnext/1/pwconv1/bias', normalized from original parameter name 'backbone.convnext.1.pwconv1.bias'.\nRenamed 'self._param_constant19' to 'self.backbone/convnext/1/pwconv2/weight', normalized from original parameter name 'backbone.convnext.1.pwconv2.weight'.\nRenamed 'self._param_constant20' to 'self.backbone/convnext/1/pwconv2/bias', normalized from original parameter name 'backbone.convnext.1.pwconv2.bias'.\nRenamed 'self._param_constant21' to 'self.backbone/convnext/1/gamma', normalized from original parameter name 'backbone.convnext.1.gamma'.\nRenamed 'self._param_constant22' to 'self.backbone/convnext/2/dwconv/weight', normalized from original parameter name 'backbone.convnext.2.dwconv.weight'.\nRenamed 'self._param_constant23' to 'self.backbone/convnext/2/dwconv/bias', normalized from original parameter name 'backbone.convnext.2.dwconv.bias'.\nRenamed 'self._param_constant24' to 'self.backbone/convnext/2/norm/weight', normalized from original parameter name 'backbone.convnext.2.norm.weight'.\nRenamed 'self._param_constant25' to 'self.backbone/convnext/2/norm/bias', normalized from original parameter name 'backbone.convnext.2.norm.bias'.\nRenamed 'self._param_constant26' to 'self.backbone/convnext/2/pwconv1/weight', normalized from original parameter name 'backbone.convnext.2.pwconv1.weight'.\nRenamed 'self._param_constant27' to 'self.backbone/convnext/2/pwconv1/bias', normalized from original parameter name 'backbone.convnext.2.pwconv1.bias'.\nRenamed 'self._param_constant28' to 'self.backbone/convnext/2/pwconv2/weight', normalized from original parameter name 'backbone.convnext.2.pwconv2.weight'.\nRenamed 'self._param_constant29' to 'self.backbone/convnext/2/pwconv2/bias', normalized from original parameter name 'backbone.convnext.2.pwconv2.bias'.\nRenamed 'self._param_constant30' to 'self.backbone/convnext/2/gamma', normalized from original parameter name 'backbone.convnext.2.gamma'.\nRenamed 'self._param_constant31' to 'self.backbone/convnext/3/dwconv/weight', normalized from original parameter name 'backbone.convnext.3.dwconv.weight'.\nRenamed 'self._param_constant32' to 'self.backbone/convnext/3/dwconv/bias', normalized from original parameter name 'backbone.convnext.3.dwconv.bias'.\nRenamed 'self._param_constant33' to 'self.backbone/convnext/3/norm/weight', normalized from original parameter name 'backbone.convnext.3.norm.weight'.\nRenamed 'self._param_constant34' to 'self.backbone/convnext/3/norm/bias', normalized from original parameter name 'backbone.convnext.3.norm.bias'.\nRenamed 'self._param_constant35' to 'self.backbone/convnext/3/pwconv1/weight', normalized from original parameter name 'backbone.convnext.3.pwconv1.weight'.\nRenamed 'self._param_constant36' to 'self.backbone/convnext/3/pwconv1/bias', normalized from original parameter name 'backbone.convnext.3.pwconv1.bias'.\nRenamed 'self._param_constant37' to 'self.backbone/convnext/3/pwconv2/weight', normalized from original parameter name 'backbone.convnext.3.pwconv2.weight'.\nRenamed 'self._param_constant38' to 'self.backbone/convnext/3/pwconv2/bias', normalized from original parameter name 'backbone.convnext.3.pwconv2.bias'.\nRenamed 'self._param_constant39' to 'self.backbone/convnext/3/gamma', normalized from original parameter name 'backbone.convnext.3.gamma'.\nRenamed 'self._param_constant40' to 'self.backbone/convnext/4/dwconv/weight', normalized from original parameter name 'backbone.convnext.4.dwconv.weight'.\nRenamed 'self._param_constant41' to 'self.backbone/convnext/4/dwconv/bias', normalized from original parameter name 'backbone.convnext.4.dwconv.bias'.\nRenamed 'self._param_constant42' to 'self.backbone/convnext/4/norm/weight', normalized from original parameter name 'backbone.convnext.4.norm.weight'.\nRenamed 'self._param_constant43' to 'self.backbone/convnext/4/norm/bias', normalized from original parameter name 'backbone.convnext.4.norm.bias'.\nRenamed 'self._param_constant44' to 'self.backbone/convnext/4/pwconv1/weight', normalized from original parameter name 'backbone.convnext.4.pwconv1.weight'.\nRenamed 'self._param_constant45' to 'self.backbone/convnext/4/pwconv1/bias', normalized from original parameter name 'backbone.convnext.4.pwconv1.bias'.\nRenamed 'self._param_constant46' to 'self.backbone/convnext/4/pwconv2/weight', normalized from original parameter name 'backbone.convnext.4.pwconv2.weight'.\nRenamed 'self._param_constant47' to 'self.backbone/convnext/4/pwconv2/bias', normalized from original parameter name 'backbone.convnext.4.pwconv2.bias'.\nRenamed 'self._param_constant48' to 'self.backbone/convnext/4/gamma', normalized from original parameter name 'backbone.convnext.4.gamma'.\nRenamed 'self._param_constant49' to 'self.backbone/convnext/5/dwconv/weight', normalized from original parameter name 'backbone.convnext.5.dwconv.weight'.\nRenamed 'self._param_constant50' to 'self.backbone/convnext/5/dwconv/bias', normalized from original parameter name 'backbone.convnext.5.dwconv.bias'.\nRenamed 'self._param_constant51' to 'self.backbone/convnext/5/norm/weight', normalized from original parameter name 'backbone.convnext.5.norm.weight'.\nRenamed 'self._param_constant52' to 'self.backbone/convnext/5/norm/bias', normalized from original parameter name 'backbone.convnext.5.norm.bias'.\nRenamed 'self._param_constant53' to 'self.backbone/convnext/5/pwconv1/weight', normalized from original parameter name 'backbone.convnext.5.pwconv1.weight'.\nRenamed 'self._param_constant54' to 'self.backbone/convnext/5/pwconv1/bias', normalized from original parameter name 'backbone.convnext.5.pwconv1.bias'.\nRenamed 'self._param_constant55' to 'self.backbone/convnext/5/pwconv2/weight', normalized from original parameter name 'backbone.convnext.5.pwconv2.weight'.\nRenamed 'self._param_constant56' to 'self.backbone/convnext/5/pwconv2/bias', normalized from original parameter name 'backbone.convnext.5.pwconv2.bias'.\nRenamed 'self._param_constant57' to 'self.backbone/convnext/5/gamma', normalized from original parameter name 'backbone.convnext.5.gamma'.\nRenamed 'self._param_constant58' to 'self.backbone/convnext/6/dwconv/weight', normalized from original parameter name 'backbone.convnext.6.dwconv.weight'.\nRenamed 'self._param_constant59' to 'self.backbone/convnext/6/dwconv/bias', normalized from original parameter name 'backbone.convnext.6.dwconv.bias'.\nRenamed 'self._param_constant60' to 'self.backbone/convnext/6/norm/weight', normalized from original parameter name 'backbone.convnext.6.norm.weight'.\nRenamed 'self._param_constant61' to 'self.backbone/convnext/6/norm/bias', normalized from original parameter name 'backbone.convnext.6.norm.bias'.\nRenamed 'self._param_constant62' to 'self.backbone/convnext/6/pwconv1/weight', normalized from original parameter name 'backbone.convnext.6.pwconv1.weight'.\nRenamed 'self._param_constant63' to 'self.backbone/convnext/6/pwconv1/bias', normalized from original parameter name 'backbone.convnext.6.pwconv1.bias'.\nRenamed 'self._param_constant64' to 'self.backbone/convnext/6/pwconv2/weight', normalized from original parameter name 'backbone.convnext.6.pwconv2.weight'.\nRenamed 'self._param_constant65' to 'self.backbone/convnext/6/pwconv2/bias', normalized from original parameter name 'backbone.convnext.6.pwconv2.bias'.\nRenamed 'self._param_constant66' to 'self.backbone/convnext/6/gamma', normalized from original parameter name 'backbone.convnext.6.gamma'.\nRenamed 'self._param_constant67' to 'self.backbone/convnext/7/dwconv/weight', normalized from original parameter name 'backbone.convnext.7.dwconv.weight'.\nRenamed 'self._param_constant68' to 'self.backbone/convnext/7/dwconv/bias', normalized from original parameter name 'backbone.convnext.7.dwconv.bias'.\nRenamed 'self._param_constant69' to 'self.backbone/convnext/7/norm/weight', normalized from original parameter name 'backbone.convnext.7.norm.weight'.\nRenamed 'self._param_constant70' to 'self.backbone/convnext/7/norm/bias', normalized from original parameter name 'backbone.convnext.7.norm.bias'.\nRenamed 'self._param_constant71' to 'self.backbone/convnext/7/pwconv1/weight', normalized from original parameter name 'backbone.convnext.7.pwconv1.weight'.\nRenamed 'self._param_constant72' to 'self.backbone/convnext/7/pwconv1/bias', normalized from original parameter name 'backbone.convnext.7.pwconv1.bias'.\nRenamed 'self._param_constant73' to 'self.backbone/convnext/7/pwconv2/weight', normalized from original parameter name 'backbone.convnext.7.pwconv2.weight'.\nRenamed 'self._param_constant74' to 'self.backbone/convnext/7/pwconv2/bias', normalized from original parameter name 'backbone.convnext.7.pwconv2.bias'.\nRenamed 'self._param_constant75' to 'self.backbone/convnext/7/gamma', normalized from original parameter name 'backbone.convnext.7.gamma'.\nRenamed 'self._param_constant76' to 'self.backbone/final_layer_norm/weight', normalized from original parameter name 'backbone.final_layer_norm.weight'.\nRenamed 'self._param_constant77' to 'self.backbone/final_layer_norm/bias', normalized from original parameter name 'backbone.final_layer_norm.bias'.\nRenamed 'self._param_constant78' to 'self.head/out/weight', normalized from original parameter name 'head.out.weight'.\nRenamed 'self._param_constant79' to 'self.head/out/bias', normalized from original parameter name 'head.out.bias'.\nRenamed 'self._tensor_constant0' to 'self.head/istft/window', normalized from original parameter name 'head.istft.window'.\n## Return values\ntorch.fx.GraphModule(<lambda>)",
      "text":"Running RestoreParameterAndBufferNames pass. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"Transform.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/_pass.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":240
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0010",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Running Modularize pass. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature Transform.run\n- self: <class 'torch.onnx._internal.fx.passes.modularization.Modularize'>\nFor detailed logging of graph modifications by this pass, either set `DiagnosticOptions.verbosity_level` to `logging.DEBUG` or use the environment variable `TORCH_LOGS='onnx_diagnostics'`.\n## Return values\ntorch.fx.GraphModule()",
      "text":"Running Modularize pass. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"Transform.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/_pass.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":240
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0010",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:arg0[name=l_x_]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(arg0)[placeholder]:Tensor(f32[512, 100, 7])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:arg0[name=l_x_]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:l_x_[name=l_x_]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(l_x_)[placeholder]:Tensor(f32[512, 100, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_models_VocosBackbone)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:l_x_[name=l_x_]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:l_x_[name=l_x_]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(l_x_)[placeholder]:Tensor(f32[512, 100, 7])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:l_x_[name=l_x_]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/embed/weight[name=backbone_embed_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/embed/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 79, in forward\n    x = self.embed(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/embed/weight[name=backbone_embed_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/embed/bias[name=backbone_embed_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/embed/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\nbackbone_embed_weight: `TorchScriptTensor(f32[512, 100, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 79, in forward\n    x = self.embed(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/embed/bias[name=backbone_embed_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[512, 100, 7])`,\n`TorchScriptTensor(f32[512, 100, 7])`,\n`TorchScriptTensor(f32[512])`,\nList[length=1](\n1,\n),\nList[length=1](\n3,\n),\nList[length=1](\n1,\n),\nFalse,\nList[length=1](\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -1\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\nbackbone_embed_weight: `TorchScriptTensor(f32[512, 100, 7])`,\nbackbone_embed_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 79, in forward\n    x = self.embed(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\nbackbone_embed_weight: `TorchScriptTensor(f32[512, 100, 7])`,\nbackbone_embed_bias: `TorchScriptTensor(f32[512])`,\nconvolution: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv1d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv1d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___embed_1[name=l__vocos____modules__backbone___embed_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___embed_1)[call_module]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_models_VocosBackbone)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 79, in forward\n    x = self.embed(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___embed_1[name=l__vocos____modules__backbone___embed_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 512, 7])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_models_VocosBackbone)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\nl__vocos____modules__backbone___embed_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 84, in forward\n    x = self.norm(x.transpose(1, 2))\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:transpose[name=transpose]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(transpose)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 84, in forward\n    x = self.norm(x.transpose(1, 2))\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:transpose[name=transpose]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/norm/weight[name=backbone_norm_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/norm/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ntranspose: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 84, in forward\n    x = self.norm(x.transpose(1, 2))\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/norm/weight[name=backbone_norm_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/norm/bias[name=backbone_norm_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/norm/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ntranspose: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_norm_weight: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 84, in forward\n    x = self.norm(x.transpose(1, 2))\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/norm/bias[name=backbone_norm_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=5](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=1](\n512,\n),\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n1e-06,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_native_layer_norm)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_native_layer_norm)`",
      "text":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ntranspose: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_norm_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 84, in forward\n    x = self.norm(x.transpose(1, 2))\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ntranspose: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 84, in forward\n    x = self.norm(x.transpose(1, 2))\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ntranspose: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\ngetitem: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_normalization_LayerNorm. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_normalization_LayerNorm. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___norm_1[name=l__vocos____modules__backbone___norm_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___norm_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_models_VocosBackbone)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\nl__vocos____modules__backbone___embed_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 84, in forward\n    x = self.norm(x.transpose(1, 2))\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___norm_1[name=l__vocos____modules__backbone___norm_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_models_VocosBackbone)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\nl__vocos____modules__backbone___embed_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 85, in forward\n    x = x.transpose(1, 2)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:transpose_1[name=transpose_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(transpose_1)[placeholder]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 85, in forward\n    x = x.transpose(1, 2)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:transpose_1[name=transpose_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:transpose_1[name=transpose_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(transpose_1)[placeholder]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 85, in forward\n    x = x.transpose(1, 2)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:transpose_1[name=transpose_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/0/dwconv/weight[name=backbone_convnext_0_dwconv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/0/dwconv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/0/dwconv/weight[name=backbone_convnext_0_dwconv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/0/dwconv/bias[name=backbone_convnext_0_dwconv_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/0/dwconv/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_0_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/0/dwconv/bias[name=backbone_convnext_0_dwconv_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[512, 512, 7])`,\n`TorchScriptTensor(f32[512, 1, 7])`,\n`TorchScriptTensor(f32[512])`,\nList[length=1](\n1,\n),\nList[length=1](\n3,\n),\nList[length=1](\n1,\n),\nFalse,\nList[length=1](\n0,\n),\n512,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -1\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_0_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\nbackbone_convnext_0_dwconv_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_0_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\nbackbone_convnext_0_dwconv_bias: `TorchScriptTensor(f32[512])`,\nconvolution_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv1d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv1d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_0_dwconv_1[name=l__vocos____modules__backbone___convnext_0_dwconv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_0_dwconv_1)[call_module]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_0_dwconv_1[name=l__vocos____modules__backbone___convnext_0_dwconv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 512, 7])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 46, in forward\n    x = x.transpose(1, 2)  # (B, C, T) -> (B, T, C)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:transpose_2[name=transpose_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(transpose_2)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 46, in forward\n    x = x.transpose(1, 2)  # (B, C, T) -> (B, T, C)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:transpose_2[name=transpose_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/0/norm/weight[name=backbone_convnext_0_norm_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/0/norm/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ntranspose_2: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/0/norm/weight[name=backbone_convnext_0_norm_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/0/norm/bias[name=backbone_convnext_0_norm_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/0/norm/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ntranspose_2: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_0_norm_weight: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/0/norm/bias[name=backbone_convnext_0_norm_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=5](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=1](\n512,\n),\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n1e-06,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_native_layer_norm)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_native_layer_norm)`",
      "text":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ntranspose_2: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_0_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_0_norm_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ntranspose_2: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_0_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_0_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm_1: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ntranspose_2: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_0_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_0_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm_1: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\ngetitem_3: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_normalization_LayerNorm. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_normalization_LayerNorm. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_0_norm_1[name=l__vocos____modules__backbone___convnext_0_norm_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_0_norm_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_2: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_0_norm_1[name=l__vocos____modules__backbone___convnext_0_norm_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_3[name=getitem_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_3)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_3[name=getitem_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=2](\n3584,\n512,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_3: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/0/pwconv1/weight[name=backbone_convnext_0_pwconv1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/0/pwconv1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_3: `TorchScriptTensor(f32[512, 7, 512])`,\nview: `TorchScriptTensor(f32[3584, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/0/pwconv1/weight[name=backbone_convnext_0_pwconv1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.t.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.t.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1536, 512])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_t)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_t)`",
      "text":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.t.default[name=t]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_3: `TorchScriptTensor(f32[512, 7, 512])`,\nview: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_0_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.t.default[name=t]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/0/pwconv1/bias[name=backbone_convnext_0_pwconv1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/0/pwconv1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngetitem_3: `TorchScriptTensor(f32[512, 7, 512])`,\nview: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_0_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt: `TorchScriptTensor(f32[512, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/0/pwconv1/bias[name=backbone_convnext_0_pwconv1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[1536])`,\n`TorchScriptTensor(f32[3584, 512])`,\n`TorchScriptTensor(f32[512, 1536])`,\n)\n- onnx_kwargs: Dict[length=2](\nbeta: 1,\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_addmm)`\n### Failed: attribute 'beta' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_addmm)`",
      "text":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.addmm.default[name=addmm]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngetitem_3: `TorchScriptTensor(f32[512, 7, 512])`,\nview: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_0_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_0_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.addmm.default[name=addmm]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[3584, 1536])`,\nList[length=3](\n512,\n7,\n1536,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngetitem_3: `TorchScriptTensor(f32[512, 7, 512])`,\nview: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_0_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_0_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\naddmm: `TorchScriptTensor(f32[3584, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngetitem_3: `TorchScriptTensor(f32[512, 7, 512])`,\nview: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_0_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_0_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\naddmm: `TorchScriptTensor(f32[3584, 1536])`,\nview_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_linear_Linear. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_linear_Linear. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_0_pwconv1_1[name=l__vocos____modules__backbone___convnext_0_pwconv1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_0_pwconv1_1)[call_module]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_2: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_0_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_0_pwconv1_1[name=l__vocos____modules__backbone___convnext_0_pwconv1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:view_1[name=view_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(view_1)[placeholder]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:view_1[name=view_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.gelu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::gelu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.gelu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.gelu.default. \nONNX Node: aten_gelu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::gelu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 7, 1536])`,\n)\n- onnx_kwargs: Dict[length=1](\napproximate: none,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_gelu)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_gelu)`",
      "text":"FX Node: aten.gelu.default. \nONNX Node: aten_gelu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.gelu.default[name=gelu]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nview_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.gelu.default[name=gelu]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nview_1: `TorchScriptTensor(f32[512, 7, 1536])`,\ngelu: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_GELU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_GELU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_0_act_1[name=l__vocos____modules__backbone___convnext_0_act_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_0_act_1)[call_module]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_2: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_0_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_0_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_0_act_1[name=l__vocos____modules__backbone___convnext_0_act_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:gelu[name=gelu]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(gelu)[placeholder]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:gelu[name=gelu]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 1536])`,\nList[length=2](\n3584,\n1536,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngelu: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/0/pwconv2/weight[name=backbone_convnext_0_pwconv2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/0/pwconv2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngelu: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_2: `TorchScriptTensor(f32[3584, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/0/pwconv2/weight[name=backbone_convnext_0_pwconv2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.t.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.t.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 1536])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_t)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_t)`",
      "text":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.t.default[name=t_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngelu: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_2: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_0_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.t.default[name=t_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/0/pwconv2/bias[name=backbone_convnext_0_pwconv2_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/0/pwconv2/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngelu: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_2: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_0_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_1: `TorchScriptTensor(f32[1536, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/0/pwconv2/bias[name=backbone_convnext_0_pwconv2_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[3584, 1536])`,\n`TorchScriptTensor(f32[1536, 512])`,\n)\n- onnx_kwargs: Dict[length=2](\nbeta: 1,\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_addmm)`\n### Failed: attribute 'beta' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_addmm)`",
      "text":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.addmm.default[name=addmm_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngelu: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_2: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_0_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_1: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_0_pwconv2_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.addmm.default[name=addmm_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[3584, 512])`,\nList[length=3](\n512,\n7,\n512,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngelu: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_2: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_0_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_1: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_0_pwconv2_bias: `TorchScriptTensor(f32[512])`,\naddmm_1: `TorchScriptTensor(f32[3584, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngelu: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_2: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_0_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_1: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_0_pwconv2_bias: `TorchScriptTensor(f32[512])`,\naddmm_1: `TorchScriptTensor(f32[3584, 512])`,\nview_3: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_linear_Linear. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_linear_Linear. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_0_pwconv2_1[name=l__vocos____modules__backbone___convnext_0_pwconv2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_0_pwconv2_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_2: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_0_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_0_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_0_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_0_pwconv2_1[name=l__vocos____modules__backbone___convnext_0_pwconv2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/0/gamma[name=backbone_convnext_0_gamma]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/0/gamma)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_2: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_0_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_0_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_0_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_0_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 56, in forward\n    x = self.gamma * x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/0/gamma[name=backbone_convnext_0_gamma]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512, 7, 512])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_bool)`\n### Failed: input type mismatch for input 'self'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\n### Failed: input type mismatch for input 'other'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\nmatch score: 0\n## Checking perfect match...\n`OnnxFunction(aten_mul)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_2: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_0_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_0_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_0_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_0_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_0_gamma: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 56, in forward\n    x = self.gamma * x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=9](\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_2: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_0_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_0_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_0_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_0_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_0_gamma: `TorchScriptTensor(f32[512])`,\nmul: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 57, in forward\n    x = x.transpose(1, 2)  # (B, T, C) -> (B, C, T)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 512, 7])`,\n`TorchScriptTensor(f32[512, 512, 7])`,\n)\n- onnx_kwargs: Dict[length=1](\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_logical_or)`\n### Failed: attribute mismatch!\nActual {'alpha'} vs expected set()\nThe function is not a nearest match candidate.\n## Checking perfect match...\n`TracedOnnxFunction(aten_add)`\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_add)`",
      "text":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.add.Tensor[name=add]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=10](\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_2: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_0_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_0_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_0_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_0_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_0_gamma: `TorchScriptTensor(f32[512])`,\nmul: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_3: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.add.Tensor[name=add]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=11](\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_2: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_0_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_0_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_0_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_0_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_0_gamma: `TorchScriptTensor(f32[512])`,\nmul: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_3: `TorchScriptTensor(f32[512, 512, 7])`,\n...\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: vocos_modules_ConvNeXtBlock. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: vocos_modules_ConvNeXtBlock. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_0_1[name=l__vocos____modules__backbone___convnext_0_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_0_1)[call_module]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_models_VocosBackbone)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\nl__vocos____modules__backbone___embed_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_0_1[name=l__vocos____modules__backbone___convnext_0_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add[name=add]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add)[placeholder]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add[name=add]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add[name=add]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add)[placeholder]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add[name=add]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/1/dwconv/weight[name=backbone_convnext_1_dwconv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/1/dwconv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/1/dwconv/weight[name=backbone_convnext_1_dwconv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/1/dwconv/bias[name=backbone_convnext_1_dwconv_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/1/dwconv/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_1_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/1/dwconv/bias[name=backbone_convnext_1_dwconv_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[512, 512, 7])`,\n`TorchScriptTensor(f32[512, 1, 7])`,\n`TorchScriptTensor(f32[512])`,\nList[length=1](\n1,\n),\nList[length=1](\n3,\n),\nList[length=1](\n1,\n),\nFalse,\nList[length=1](\n0,\n),\n512,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -1\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_1_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\nbackbone_convnext_1_dwconv_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nadd: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_1_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\nbackbone_convnext_1_dwconv_bias: `TorchScriptTensor(f32[512])`,\nconvolution_2: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv1d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv1d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_1_dwconv_1[name=l__vocos____modules__backbone___convnext_1_dwconv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_1_dwconv_1)[call_module]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_1_dwconv_1[name=l__vocos____modules__backbone___convnext_1_dwconv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 512, 7])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 46, in forward\n    x = x.transpose(1, 2)  # (B, C, T) -> (B, T, C)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:transpose_4[name=transpose_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(transpose_4)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 46, in forward\n    x = x.transpose(1, 2)  # (B, C, T) -> (B, T, C)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:transpose_4[name=transpose_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/1/norm/weight[name=backbone_convnext_1_norm_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/1/norm/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ntranspose_4: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/1/norm/weight[name=backbone_convnext_1_norm_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/1/norm/bias[name=backbone_convnext_1_norm_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/1/norm/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ntranspose_4: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_1_norm_weight: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/1/norm/bias[name=backbone_convnext_1_norm_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=5](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=1](\n512,\n),\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n1e-06,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_native_layer_norm)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_native_layer_norm)`",
      "text":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ntranspose_4: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_1_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_1_norm_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ntranspose_4: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_1_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_1_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm_2: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ntranspose_4: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_1_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_1_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm_2: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\ngetitem_6: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_normalization_LayerNorm. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_normalization_LayerNorm. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_1_norm_1[name=l__vocos____modules__backbone___convnext_1_norm_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_1_norm_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_4: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_1_norm_1[name=l__vocos____modules__backbone___convnext_1_norm_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_6[name=getitem_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_6)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_6[name=getitem_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=2](\n3584,\n512,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_6: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/1/pwconv1/weight[name=backbone_convnext_1_pwconv1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/1/pwconv1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_6: `TorchScriptTensor(f32[512, 7, 512])`,\nview_4: `TorchScriptTensor(f32[3584, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/1/pwconv1/weight[name=backbone_convnext_1_pwconv1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.t.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.t.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1536, 512])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_t)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_t)`",
      "text":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.t.default[name=t_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_6: `TorchScriptTensor(f32[512, 7, 512])`,\nview_4: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_1_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.t.default[name=t_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/1/pwconv1/bias[name=backbone_convnext_1_pwconv1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/1/pwconv1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngetitem_6: `TorchScriptTensor(f32[512, 7, 512])`,\nview_4: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_1_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_2: `TorchScriptTensor(f32[512, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/1/pwconv1/bias[name=backbone_convnext_1_pwconv1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[1536])`,\n`TorchScriptTensor(f32[3584, 512])`,\n`TorchScriptTensor(f32[512, 1536])`,\n)\n- onnx_kwargs: Dict[length=2](\nbeta: 1,\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_addmm)`\n### Failed: attribute 'beta' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_addmm)`",
      "text":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.addmm.default[name=addmm_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngetitem_6: `TorchScriptTensor(f32[512, 7, 512])`,\nview_4: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_1_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_2: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_1_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.addmm.default[name=addmm_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[3584, 1536])`,\nList[length=3](\n512,\n7,\n1536,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngetitem_6: `TorchScriptTensor(f32[512, 7, 512])`,\nview_4: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_1_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_2: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_1_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\naddmm_2: `TorchScriptTensor(f32[3584, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngetitem_6: `TorchScriptTensor(f32[512, 7, 512])`,\nview_4: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_1_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_2: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_1_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\naddmm_2: `TorchScriptTensor(f32[3584, 1536])`,\nview_5: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_linear_Linear. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_linear_Linear. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_1_pwconv1_1[name=l__vocos____modules__backbone___convnext_1_pwconv1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_1_pwconv1_1)[call_module]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nadd: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_4: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_1_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_1_pwconv1_1[name=l__vocos____modules__backbone___convnext_1_pwconv1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:view_5[name=view_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(view_5)[placeholder]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:view_5[name=view_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.gelu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::gelu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.gelu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.gelu.default. \nONNX Node: aten_gelu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::gelu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 7, 1536])`,\n)\n- onnx_kwargs: Dict[length=1](\napproximate: none,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_gelu)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_gelu)`",
      "text":"FX Node: aten.gelu.default. \nONNX Node: aten_gelu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.gelu.default[name=gelu_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nview_5: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.gelu.default[name=gelu_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nview_5: `TorchScriptTensor(f32[512, 7, 1536])`,\ngelu_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_GELU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_GELU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_1_act_1[name=l__vocos____modules__backbone___convnext_1_act_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_1_act_1)[call_module]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nadd: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_4: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_1_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_1_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_1_act_1[name=l__vocos____modules__backbone___convnext_1_act_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:gelu_1[name=gelu_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(gelu_1)[placeholder]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:gelu_1[name=gelu_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 1536])`,\nList[length=2](\n3584,\n1536,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngelu_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/1/pwconv2/weight[name=backbone_convnext_1_pwconv2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/1/pwconv2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngelu_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_6: `TorchScriptTensor(f32[3584, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/1/pwconv2/weight[name=backbone_convnext_1_pwconv2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.t.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.t.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 1536])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_t)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_t)`",
      "text":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.t.default[name=t_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngelu_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_6: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_1_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.t.default[name=t_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/1/pwconv2/bias[name=backbone_convnext_1_pwconv2_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/1/pwconv2/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngelu_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_6: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_1_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_3: `TorchScriptTensor(f32[1536, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/1/pwconv2/bias[name=backbone_convnext_1_pwconv2_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[3584, 1536])`,\n`TorchScriptTensor(f32[1536, 512])`,\n)\n- onnx_kwargs: Dict[length=2](\nbeta: 1,\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_addmm)`\n### Failed: attribute 'beta' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_addmm)`",
      "text":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.addmm.default[name=addmm_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngelu_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_6: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_1_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_3: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_1_pwconv2_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.addmm.default[name=addmm_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[3584, 512])`,\nList[length=3](\n512,\n7,\n512,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngelu_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_6: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_1_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_3: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_1_pwconv2_bias: `TorchScriptTensor(f32[512])`,\naddmm_3: `TorchScriptTensor(f32[3584, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngelu_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_6: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_1_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_3: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_1_pwconv2_bias: `TorchScriptTensor(f32[512])`,\naddmm_3: `TorchScriptTensor(f32[3584, 512])`,\nview_7: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_linear_Linear. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_linear_Linear. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_1_pwconv2_1[name=l__vocos____modules__backbone___convnext_1_pwconv2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_1_pwconv2_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nadd: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_4: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_1_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_1_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_1_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_1_pwconv2_1[name=l__vocos____modules__backbone___convnext_1_pwconv2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/1/gamma[name=backbone_convnext_1_gamma]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/1/gamma)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nadd: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_4: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_1_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_1_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_1_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_1_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 56, in forward\n    x = self.gamma * x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/1/gamma[name=backbone_convnext_1_gamma]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512, 7, 512])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_bool)`\n### Failed: input type mismatch for input 'self'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\n### Failed: input type mismatch for input 'other'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\nmatch score: 0\n## Checking perfect match...\n`OnnxFunction(aten_mul)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\nadd: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_4: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_1_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_1_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_1_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_1_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_1_gamma: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 56, in forward\n    x = self.gamma * x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=9](\nadd: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_4: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_1_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_1_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_1_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_1_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_1_gamma: `TorchScriptTensor(f32[512])`,\nmul_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 57, in forward\n    x = x.transpose(1, 2)  # (B, T, C) -> (B, C, T)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 512, 7])`,\n`TorchScriptTensor(f32[512, 512, 7])`,\n)\n- onnx_kwargs: Dict[length=1](\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_logical_or)`\n### Failed: attribute mismatch!\nActual {'alpha'} vs expected set()\nThe function is not a nearest match candidate.\n## Checking perfect match...\n`TracedOnnxFunction(aten_add)`\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_add)`",
      "text":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.add.Tensor[name=add_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=10](\nadd: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_4: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_1_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_1_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_1_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_1_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_1_gamma: `TorchScriptTensor(f32[512])`,\nmul_1: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_5: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.add.Tensor[name=add_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=11](\nadd: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_4: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_1_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_1_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_1_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_1_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_1_gamma: `TorchScriptTensor(f32[512])`,\nmul_1: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_5: `TorchScriptTensor(f32[512, 512, 7])`,\n...\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: vocos_modules_ConvNeXtBlock. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: vocos_modules_ConvNeXtBlock. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_1_1[name=l__vocos____modules__backbone___convnext_1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_1_1)[call_module]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_models_VocosBackbone)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\nl__vocos____modules__backbone___embed_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_1_1[name=l__vocos____modules__backbone___convnext_1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_1[name=add_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_1)[placeholder]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_1[name=add_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_1[name=add_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_1)[placeholder]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_1[name=add_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/2/dwconv/weight[name=backbone_convnext_2_dwconv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/2/dwconv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/2/dwconv/weight[name=backbone_convnext_2_dwconv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/2/dwconv/bias[name=backbone_convnext_2_dwconv_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/2/dwconv/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_1: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_2_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/2/dwconv/bias[name=backbone_convnext_2_dwconv_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[512, 512, 7])`,\n`TorchScriptTensor(f32[512, 1, 7])`,\n`TorchScriptTensor(f32[512])`,\nList[length=1](\n1,\n),\nList[length=1](\n3,\n),\nList[length=1](\n1,\n),\nFalse,\nList[length=1](\n0,\n),\n512,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -1\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_1: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_2_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\nbackbone_convnext_2_dwconv_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nadd_1: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_2_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\nbackbone_convnext_2_dwconv_bias: `TorchScriptTensor(f32[512])`,\nconvolution_3: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv1d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv1d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_2_dwconv_1[name=l__vocos____modules__backbone___convnext_2_dwconv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_2_dwconv_1)[call_module]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_2_dwconv_1[name=l__vocos____modules__backbone___convnext_2_dwconv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 512, 7])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_2_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 46, in forward\n    x = x.transpose(1, 2)  # (B, C, T) -> (B, T, C)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:transpose_6[name=transpose_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(transpose_6)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 46, in forward\n    x = x.transpose(1, 2)  # (B, C, T) -> (B, T, C)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:transpose_6[name=transpose_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/2/norm/weight[name=backbone_convnext_2_norm_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/2/norm/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ntranspose_6: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/2/norm/weight[name=backbone_convnext_2_norm_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/2/norm/bias[name=backbone_convnext_2_norm_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/2/norm/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ntranspose_6: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_2_norm_weight: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/2/norm/bias[name=backbone_convnext_2_norm_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=5](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=1](\n512,\n),\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n1e-06,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_native_layer_norm)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_native_layer_norm)`",
      "text":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ntranspose_6: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_2_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_2_norm_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ntranspose_6: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_2_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_2_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm_3: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ntranspose_6: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_2_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_2_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm_3: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\ngetitem_9: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_normalization_LayerNorm. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_normalization_LayerNorm. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_2_norm_1[name=l__vocos____modules__backbone___convnext_2_norm_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_2_norm_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_2_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_6: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_2_norm_1[name=l__vocos____modules__backbone___convnext_2_norm_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_9[name=getitem_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_9)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_9[name=getitem_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=2](\n3584,\n512,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_9: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/2/pwconv1/weight[name=backbone_convnext_2_pwconv1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/2/pwconv1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_9: `TorchScriptTensor(f32[512, 7, 512])`,\nview_8: `TorchScriptTensor(f32[3584, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/2/pwconv1/weight[name=backbone_convnext_2_pwconv1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.t.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.t.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1536, 512])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_t)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_t)`",
      "text":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.t.default[name=t_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_9: `TorchScriptTensor(f32[512, 7, 512])`,\nview_8: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_2_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.t.default[name=t_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/2/pwconv1/bias[name=backbone_convnext_2_pwconv1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/2/pwconv1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngetitem_9: `TorchScriptTensor(f32[512, 7, 512])`,\nview_8: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_2_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_4: `TorchScriptTensor(f32[512, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/2/pwconv1/bias[name=backbone_convnext_2_pwconv1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[1536])`,\n`TorchScriptTensor(f32[3584, 512])`,\n`TorchScriptTensor(f32[512, 1536])`,\n)\n- onnx_kwargs: Dict[length=2](\nbeta: 1,\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_addmm)`\n### Failed: attribute 'beta' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_addmm)`",
      "text":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.addmm.default[name=addmm_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngetitem_9: `TorchScriptTensor(f32[512, 7, 512])`,\nview_8: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_2_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_4: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_2_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.addmm.default[name=addmm_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[3584, 1536])`,\nList[length=3](\n512,\n7,\n1536,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngetitem_9: `TorchScriptTensor(f32[512, 7, 512])`,\nview_8: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_2_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_4: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_2_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\naddmm_4: `TorchScriptTensor(f32[3584, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngetitem_9: `TorchScriptTensor(f32[512, 7, 512])`,\nview_8: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_2_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_4: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_2_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\naddmm_4: `TorchScriptTensor(f32[3584, 1536])`,\nview_9: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_linear_Linear. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_linear_Linear. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_2_pwconv1_1[name=l__vocos____modules__backbone___convnext_2_pwconv1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_2_pwconv1_1)[call_module]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nadd_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_2_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_6: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_2_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_2_pwconv1_1[name=l__vocos____modules__backbone___convnext_2_pwconv1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:view_9[name=view_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(view_9)[placeholder]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:view_9[name=view_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.gelu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::gelu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.gelu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.gelu.default. \nONNX Node: aten_gelu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::gelu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 7, 1536])`,\n)\n- onnx_kwargs: Dict[length=1](\napproximate: none,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_gelu)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_gelu)`",
      "text":"FX Node: aten.gelu.default. \nONNX Node: aten_gelu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.gelu.default[name=gelu_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nview_9: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.gelu.default[name=gelu_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nview_9: `TorchScriptTensor(f32[512, 7, 1536])`,\ngelu_2: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_GELU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_GELU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_2_act_1[name=l__vocos____modules__backbone___convnext_2_act_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_2_act_1)[call_module]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nadd_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_2_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_6: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_2_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_2_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_2_act_1[name=l__vocos____modules__backbone___convnext_2_act_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:gelu_2[name=gelu_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(gelu_2)[placeholder]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:gelu_2[name=gelu_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 1536])`,\nList[length=2](\n3584,\n1536,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_10]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngelu_2: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_10]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/2/pwconv2/weight[name=backbone_convnext_2_pwconv2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/2/pwconv2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngelu_2: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_10: `TorchScriptTensor(f32[3584, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/2/pwconv2/weight[name=backbone_convnext_2_pwconv2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.t.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.t.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 1536])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_t)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_t)`",
      "text":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.t.default[name=t_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngelu_2: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_10: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_2_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.t.default[name=t_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/2/pwconv2/bias[name=backbone_convnext_2_pwconv2_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/2/pwconv2/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngelu_2: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_10: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_2_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_5: `TorchScriptTensor(f32[1536, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/2/pwconv2/bias[name=backbone_convnext_2_pwconv2_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[3584, 1536])`,\n`TorchScriptTensor(f32[1536, 512])`,\n)\n- onnx_kwargs: Dict[length=2](\nbeta: 1,\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_addmm)`\n### Failed: attribute 'beta' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_addmm)`",
      "text":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.addmm.default[name=addmm_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngelu_2: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_10: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_2_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_5: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_2_pwconv2_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.addmm.default[name=addmm_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[3584, 512])`,\nList[length=3](\n512,\n7,\n512,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_11]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngelu_2: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_10: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_2_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_5: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_2_pwconv2_bias: `TorchScriptTensor(f32[512])`,\naddmm_5: `TorchScriptTensor(f32[3584, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_11]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngelu_2: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_10: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_2_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_5: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_2_pwconv2_bias: `TorchScriptTensor(f32[512])`,\naddmm_5: `TorchScriptTensor(f32[3584, 512])`,\nview_11: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_linear_Linear. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_linear_Linear. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_2_pwconv2_1[name=l__vocos____modules__backbone___convnext_2_pwconv2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_2_pwconv2_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nadd_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_2_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_6: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_2_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_2_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_2_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_2_pwconv2_1[name=l__vocos____modules__backbone___convnext_2_pwconv2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/2/gamma[name=backbone_convnext_2_gamma]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/2/gamma)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nadd_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_2_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_6: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_2_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_2_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_2_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_2_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 56, in forward\n    x = self.gamma * x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/2/gamma[name=backbone_convnext_2_gamma]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512, 7, 512])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_bool)`\n### Failed: input type mismatch for input 'self'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\n### Failed: input type mismatch for input 'other'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\nmatch score: 0\n## Checking perfect match...\n`OnnxFunction(aten_mul)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\nadd_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_2_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_6: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_2_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_2_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_2_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_2_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_2_gamma: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 56, in forward\n    x = self.gamma * x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=9](\nadd_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_2_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_6: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_2_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_2_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_2_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_2_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_2_gamma: `TorchScriptTensor(f32[512])`,\nmul_2: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 57, in forward\n    x = x.transpose(1, 2)  # (B, T, C) -> (B, C, T)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 512, 7])`,\n`TorchScriptTensor(f32[512, 512, 7])`,\n)\n- onnx_kwargs: Dict[length=1](\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_logical_or)`\n### Failed: attribute mismatch!\nActual {'alpha'} vs expected set()\nThe function is not a nearest match candidate.\n## Checking perfect match...\n`TracedOnnxFunction(aten_add)`\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_add)`",
      "text":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.add.Tensor[name=add_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=10](\nadd_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_2_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_6: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_2_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_2_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_2_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_2_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_2_gamma: `TorchScriptTensor(f32[512])`,\nmul_2: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_7: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.add.Tensor[name=add_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=11](\nadd_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_2_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_6: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_2_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_2_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_2_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_2_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_2_gamma: `TorchScriptTensor(f32[512])`,\nmul_2: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_7: `TorchScriptTensor(f32[512, 512, 7])`,\n...\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: vocos_modules_ConvNeXtBlock. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: vocos_modules_ConvNeXtBlock. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_2_1[name=l__vocos____modules__backbone___convnext_2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_2_1)[call_module]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_models_VocosBackbone)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\nl__vocos____modules__backbone___embed_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_2_1[name=l__vocos____modules__backbone___convnext_2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_2[name=add_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_2)[placeholder]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_2[name=add_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_2[name=add_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_2)[placeholder]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_2[name=add_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/3/dwconv/weight[name=backbone_convnext_3_dwconv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/3/dwconv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_2: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/3/dwconv/weight[name=backbone_convnext_3_dwconv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/3/dwconv/bias[name=backbone_convnext_3_dwconv_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/3/dwconv/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_2: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_3_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/3/dwconv/bias[name=backbone_convnext_3_dwconv_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[512, 512, 7])`,\n`TorchScriptTensor(f32[512, 1, 7])`,\n`TorchScriptTensor(f32[512])`,\nList[length=1](\n1,\n),\nList[length=1](\n3,\n),\nList[length=1](\n1,\n),\nFalse,\nList[length=1](\n0,\n),\n512,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -1\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_2: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_3_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\nbackbone_convnext_3_dwconv_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nadd_2: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_3_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\nbackbone_convnext_3_dwconv_bias: `TorchScriptTensor(f32[512])`,\nconvolution_4: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv1d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv1d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_3_dwconv_1[name=l__vocos____modules__backbone___convnext_3_dwconv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_3_dwconv_1)[call_module]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_2: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_3_dwconv_1[name=l__vocos____modules__backbone___convnext_3_dwconv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 512, 7])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_2: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_3_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 46, in forward\n    x = x.transpose(1, 2)  # (B, C, T) -> (B, T, C)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:transpose_8[name=transpose_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(transpose_8)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 46, in forward\n    x = x.transpose(1, 2)  # (B, C, T) -> (B, T, C)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:transpose_8[name=transpose_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/3/norm/weight[name=backbone_convnext_3_norm_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/3/norm/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ntranspose_8: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/3/norm/weight[name=backbone_convnext_3_norm_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/3/norm/bias[name=backbone_convnext_3_norm_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/3/norm/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ntranspose_8: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_3_norm_weight: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/3/norm/bias[name=backbone_convnext_3_norm_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=5](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=1](\n512,\n),\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n1e-06,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_native_layer_norm)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_native_layer_norm)`",
      "text":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ntranspose_8: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_3_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_3_norm_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ntranspose_8: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_3_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_3_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm_4: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ntranspose_8: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_3_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_3_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm_4: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\ngetitem_12: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_normalization_LayerNorm. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_normalization_LayerNorm. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_3_norm_1[name=l__vocos____modules__backbone___convnext_3_norm_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_3_norm_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_2: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_3_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_8: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_3_norm_1[name=l__vocos____modules__backbone___convnext_3_norm_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_12[name=getitem_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_12)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_12[name=getitem_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=2](\n3584,\n512,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_12: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/3/pwconv1/weight[name=backbone_convnext_3_pwconv1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/3/pwconv1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_12: `TorchScriptTensor(f32[512, 7, 512])`,\nview_12: `TorchScriptTensor(f32[3584, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/3/pwconv1/weight[name=backbone_convnext_3_pwconv1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.t.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.t.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1536, 512])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_t)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_t)`",
      "text":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.t.default[name=t_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_12: `TorchScriptTensor(f32[512, 7, 512])`,\nview_12: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_3_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.t.default[name=t_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/3/pwconv1/bias[name=backbone_convnext_3_pwconv1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/3/pwconv1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngetitem_12: `TorchScriptTensor(f32[512, 7, 512])`,\nview_12: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_3_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_6: `TorchScriptTensor(f32[512, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/3/pwconv1/bias[name=backbone_convnext_3_pwconv1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[1536])`,\n`TorchScriptTensor(f32[3584, 512])`,\n`TorchScriptTensor(f32[512, 1536])`,\n)\n- onnx_kwargs: Dict[length=2](\nbeta: 1,\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_addmm)`\n### Failed: attribute 'beta' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_addmm)`",
      "text":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.addmm.default[name=addmm_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngetitem_12: `TorchScriptTensor(f32[512, 7, 512])`,\nview_12: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_3_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_6: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_3_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.addmm.default[name=addmm_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[3584, 1536])`,\nList[length=3](\n512,\n7,\n1536,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_13]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngetitem_12: `TorchScriptTensor(f32[512, 7, 512])`,\nview_12: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_3_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_6: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_3_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\naddmm_6: `TorchScriptTensor(f32[3584, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_13]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngetitem_12: `TorchScriptTensor(f32[512, 7, 512])`,\nview_12: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_3_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_6: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_3_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\naddmm_6: `TorchScriptTensor(f32[3584, 1536])`,\nview_13: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_linear_Linear. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_linear_Linear. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_3_pwconv1_1[name=l__vocos____modules__backbone___convnext_3_pwconv1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_3_pwconv1_1)[call_module]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nadd_2: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_3_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_8: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_3_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_3_pwconv1_1[name=l__vocos____modules__backbone___convnext_3_pwconv1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:view_13[name=view_13]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(view_13)[placeholder]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:view_13[name=view_13]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.gelu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::gelu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.gelu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.gelu.default. \nONNX Node: aten_gelu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::gelu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 7, 1536])`,\n)\n- onnx_kwargs: Dict[length=1](\napproximate: none,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_gelu)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_gelu)`",
      "text":"FX Node: aten.gelu.default. \nONNX Node: aten_gelu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.gelu.default[name=gelu_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nview_13: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.gelu.default[name=gelu_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nview_13: `TorchScriptTensor(f32[512, 7, 1536])`,\ngelu_3: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_GELU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_GELU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_3_act_1[name=l__vocos____modules__backbone___convnext_3_act_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_3_act_1)[call_module]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nadd_2: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_3_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_8: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_3_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_3_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_3_act_1[name=l__vocos____modules__backbone___convnext_3_act_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:gelu_3[name=gelu_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(gelu_3)[placeholder]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:gelu_3[name=gelu_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 1536])`,\nList[length=2](\n3584,\n1536,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_14]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngelu_3: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_14]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/3/pwconv2/weight[name=backbone_convnext_3_pwconv2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/3/pwconv2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngelu_3: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_14: `TorchScriptTensor(f32[3584, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/3/pwconv2/weight[name=backbone_convnext_3_pwconv2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.t.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.t.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 1536])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_t)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_t)`",
      "text":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.t.default[name=t_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngelu_3: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_14: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_3_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.t.default[name=t_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/3/pwconv2/bias[name=backbone_convnext_3_pwconv2_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/3/pwconv2/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngelu_3: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_14: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_3_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_7: `TorchScriptTensor(f32[1536, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/3/pwconv2/bias[name=backbone_convnext_3_pwconv2_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[3584, 1536])`,\n`TorchScriptTensor(f32[1536, 512])`,\n)\n- onnx_kwargs: Dict[length=2](\nbeta: 1,\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_addmm)`\n### Failed: attribute 'beta' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_addmm)`",
      "text":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.addmm.default[name=addmm_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngelu_3: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_14: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_3_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_7: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_3_pwconv2_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.addmm.default[name=addmm_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[3584, 512])`,\nList[length=3](\n512,\n7,\n512,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_15]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngelu_3: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_14: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_3_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_7: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_3_pwconv2_bias: `TorchScriptTensor(f32[512])`,\naddmm_7: `TorchScriptTensor(f32[3584, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_15]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngelu_3: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_14: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_3_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_7: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_3_pwconv2_bias: `TorchScriptTensor(f32[512])`,\naddmm_7: `TorchScriptTensor(f32[3584, 512])`,\nview_15: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_linear_Linear. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_linear_Linear. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_3_pwconv2_1[name=l__vocos____modules__backbone___convnext_3_pwconv2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_3_pwconv2_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nadd_2: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_3_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_8: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_3_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_3_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_3_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_3_pwconv2_1[name=l__vocos____modules__backbone___convnext_3_pwconv2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/3/gamma[name=backbone_convnext_3_gamma]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/3/gamma)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nadd_2: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_3_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_8: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_3_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_3_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_3_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_3_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 56, in forward\n    x = self.gamma * x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/3/gamma[name=backbone_convnext_3_gamma]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512, 7, 512])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_bool)`\n### Failed: input type mismatch for input 'self'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\n### Failed: input type mismatch for input 'other'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\nmatch score: 0\n## Checking perfect match...\n`OnnxFunction(aten_mul)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\nadd_2: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_3_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_8: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_3_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_3_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_3_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_3_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_3_gamma: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 56, in forward\n    x = self.gamma * x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=9](\nadd_2: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_3_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_8: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_3_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_3_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_3_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_3_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_3_gamma: `TorchScriptTensor(f32[512])`,\nmul_3: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 57, in forward\n    x = x.transpose(1, 2)  # (B, T, C) -> (B, C, T)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 512, 7])`,\n`TorchScriptTensor(f32[512, 512, 7])`,\n)\n- onnx_kwargs: Dict[length=1](\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_logical_or)`\n### Failed: attribute mismatch!\nActual {'alpha'} vs expected set()\nThe function is not a nearest match candidate.\n## Checking perfect match...\n`TracedOnnxFunction(aten_add)`\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_add)`",
      "text":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.add.Tensor[name=add_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=10](\nadd_2: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_3_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_8: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_3_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_3_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_3_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_3_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_3_gamma: `TorchScriptTensor(f32[512])`,\nmul_3: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_9: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.add.Tensor[name=add_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=11](\nadd_2: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_3_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_8: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_3_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_3_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_3_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_3_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_3_gamma: `TorchScriptTensor(f32[512])`,\nmul_3: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_9: `TorchScriptTensor(f32[512, 512, 7])`,\n...\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: vocos_modules_ConvNeXtBlock. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: vocos_modules_ConvNeXtBlock. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_3_1[name=l__vocos____modules__backbone___convnext_3_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_3_1)[call_module]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_models_VocosBackbone)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\nl__vocos____modules__backbone___embed_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_2_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_3_1[name=l__vocos____modules__backbone___convnext_3_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_3[name=add_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_3)[placeholder]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_3[name=add_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_3[name=add_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_3)[placeholder]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_3[name=add_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/4/dwconv/weight[name=backbone_convnext_4_dwconv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/4/dwconv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_3: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/4/dwconv/weight[name=backbone_convnext_4_dwconv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/4/dwconv/bias[name=backbone_convnext_4_dwconv_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/4/dwconv/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_3: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_4_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/4/dwconv/bias[name=backbone_convnext_4_dwconv_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[512, 512, 7])`,\n`TorchScriptTensor(f32[512, 1, 7])`,\n`TorchScriptTensor(f32[512])`,\nList[length=1](\n1,\n),\nList[length=1](\n3,\n),\nList[length=1](\n1,\n),\nFalse,\nList[length=1](\n0,\n),\n512,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -1\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_3: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_4_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\nbackbone_convnext_4_dwconv_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nadd_3: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_4_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\nbackbone_convnext_4_dwconv_bias: `TorchScriptTensor(f32[512])`,\nconvolution_5: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv1d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv1d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_4_dwconv_1[name=l__vocos____modules__backbone___convnext_4_dwconv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_4_dwconv_1)[call_module]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_3: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_4_dwconv_1[name=l__vocos____modules__backbone___convnext_4_dwconv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 512, 7])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_10]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_3: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_4_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 46, in forward\n    x = x.transpose(1, 2)  # (B, C, T) -> (B, T, C)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_10]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:transpose_10[name=transpose_10]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(transpose_10)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 46, in forward\n    x = x.transpose(1, 2)  # (B, C, T) -> (B, T, C)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:transpose_10[name=transpose_10]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/4/norm/weight[name=backbone_convnext_4_norm_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/4/norm/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ntranspose_10: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/4/norm/weight[name=backbone_convnext_4_norm_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/4/norm/bias[name=backbone_convnext_4_norm_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/4/norm/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ntranspose_10: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_4_norm_weight: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/4/norm/bias[name=backbone_convnext_4_norm_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=5](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=1](\n512,\n),\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n1e-06,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_native_layer_norm)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_native_layer_norm)`",
      "text":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ntranspose_10: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_4_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_4_norm_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_15]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ntranspose_10: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_4_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_4_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm_5: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_15]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ntranspose_10: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_4_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_4_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm_5: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\ngetitem_15: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_normalization_LayerNorm. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_normalization_LayerNorm. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_4_norm_1[name=l__vocos____modules__backbone___convnext_4_norm_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_4_norm_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_3: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_4_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_10: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_4_norm_1[name=l__vocos____modules__backbone___convnext_4_norm_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_15[name=getitem_15]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_15)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_15[name=getitem_15]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=2](\n3584,\n512,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_16]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_15: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_16]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/4/pwconv1/weight[name=backbone_convnext_4_pwconv1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/4/pwconv1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_15: `TorchScriptTensor(f32[512, 7, 512])`,\nview_16: `TorchScriptTensor(f32[3584, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/4/pwconv1/weight[name=backbone_convnext_4_pwconv1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.t.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.t.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1536, 512])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_t)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_t)`",
      "text":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.t.default[name=t_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_15: `TorchScriptTensor(f32[512, 7, 512])`,\nview_16: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_4_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.t.default[name=t_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/4/pwconv1/bias[name=backbone_convnext_4_pwconv1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/4/pwconv1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngetitem_15: `TorchScriptTensor(f32[512, 7, 512])`,\nview_16: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_4_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_8: `TorchScriptTensor(f32[512, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/4/pwconv1/bias[name=backbone_convnext_4_pwconv1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[1536])`,\n`TorchScriptTensor(f32[3584, 512])`,\n`TorchScriptTensor(f32[512, 1536])`,\n)\n- onnx_kwargs: Dict[length=2](\nbeta: 1,\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_addmm)`\n### Failed: attribute 'beta' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_addmm)`",
      "text":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.addmm.default[name=addmm_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngetitem_15: `TorchScriptTensor(f32[512, 7, 512])`,\nview_16: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_4_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_8: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_4_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.addmm.default[name=addmm_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[3584, 1536])`,\nList[length=3](\n512,\n7,\n1536,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_17]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngetitem_15: `TorchScriptTensor(f32[512, 7, 512])`,\nview_16: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_4_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_8: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_4_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\naddmm_8: `TorchScriptTensor(f32[3584, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_17]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngetitem_15: `TorchScriptTensor(f32[512, 7, 512])`,\nview_16: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_4_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_8: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_4_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\naddmm_8: `TorchScriptTensor(f32[3584, 1536])`,\nview_17: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_linear_Linear. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_linear_Linear. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_4_pwconv1_1[name=l__vocos____modules__backbone___convnext_4_pwconv1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_4_pwconv1_1)[call_module]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nadd_3: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_4_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_10: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_4_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_4_pwconv1_1[name=l__vocos____modules__backbone___convnext_4_pwconv1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:view_17[name=view_17]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(view_17)[placeholder]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:view_17[name=view_17]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.gelu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::gelu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.gelu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.gelu.default. \nONNX Node: aten_gelu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::gelu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 7, 1536])`,\n)\n- onnx_kwargs: Dict[length=1](\napproximate: none,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_gelu)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_gelu)`",
      "text":"FX Node: aten.gelu.default. \nONNX Node: aten_gelu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.gelu.default[name=gelu_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nview_17: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.gelu.default[name=gelu_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nview_17: `TorchScriptTensor(f32[512, 7, 1536])`,\ngelu_4: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_GELU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_GELU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_4_act_1[name=l__vocos____modules__backbone___convnext_4_act_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_4_act_1)[call_module]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nadd_3: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_4_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_10: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_4_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_4_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_4_act_1[name=l__vocos____modules__backbone___convnext_4_act_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:gelu_4[name=gelu_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(gelu_4)[placeholder]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:gelu_4[name=gelu_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 1536])`,\nList[length=2](\n3584,\n1536,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_18]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngelu_4: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_18]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/4/pwconv2/weight[name=backbone_convnext_4_pwconv2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/4/pwconv2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngelu_4: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_18: `TorchScriptTensor(f32[3584, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/4/pwconv2/weight[name=backbone_convnext_4_pwconv2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.t.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.t.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 1536])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_t)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_t)`",
      "text":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.t.default[name=t_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngelu_4: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_18: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_4_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.t.default[name=t_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/4/pwconv2/bias[name=backbone_convnext_4_pwconv2_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/4/pwconv2/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngelu_4: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_18: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_4_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_9: `TorchScriptTensor(f32[1536, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/4/pwconv2/bias[name=backbone_convnext_4_pwconv2_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[3584, 1536])`,\n`TorchScriptTensor(f32[1536, 512])`,\n)\n- onnx_kwargs: Dict[length=2](\nbeta: 1,\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_addmm)`\n### Failed: attribute 'beta' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_addmm)`",
      "text":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.addmm.default[name=addmm_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngelu_4: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_18: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_4_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_9: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_4_pwconv2_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.addmm.default[name=addmm_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[3584, 512])`,\nList[length=3](\n512,\n7,\n512,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_19]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngelu_4: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_18: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_4_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_9: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_4_pwconv2_bias: `TorchScriptTensor(f32[512])`,\naddmm_9: `TorchScriptTensor(f32[3584, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_19]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngelu_4: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_18: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_4_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_9: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_4_pwconv2_bias: `TorchScriptTensor(f32[512])`,\naddmm_9: `TorchScriptTensor(f32[3584, 512])`,\nview_19: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_linear_Linear. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_linear_Linear. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_4_pwconv2_1[name=l__vocos____modules__backbone___convnext_4_pwconv2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_4_pwconv2_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nadd_3: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_4_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_10: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_4_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_4_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_4_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_4_pwconv2_1[name=l__vocos____modules__backbone___convnext_4_pwconv2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/4/gamma[name=backbone_convnext_4_gamma]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/4/gamma)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nadd_3: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_4_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_10: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_4_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_4_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_4_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_4_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 56, in forward\n    x = self.gamma * x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/4/gamma[name=backbone_convnext_4_gamma]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512, 7, 512])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_bool)`\n### Failed: input type mismatch for input 'self'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\n### Failed: input type mismatch for input 'other'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\nmatch score: 0\n## Checking perfect match...\n`OnnxFunction(aten_mul)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\nadd_3: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_4_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_10: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_4_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_4_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_4_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_4_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_4_gamma: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 56, in forward\n    x = self.gamma * x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_11]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=9](\nadd_3: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_4_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_10: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_4_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_4_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_4_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_4_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_4_gamma: `TorchScriptTensor(f32[512])`,\nmul_4: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 57, in forward\n    x = x.transpose(1, 2)  # (B, T, C) -> (B, C, T)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_11]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 512, 7])`,\n`TorchScriptTensor(f32[512, 512, 7])`,\n)\n- onnx_kwargs: Dict[length=1](\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_logical_or)`\n### Failed: attribute mismatch!\nActual {'alpha'} vs expected set()\nThe function is not a nearest match candidate.\n## Checking perfect match...\n`TracedOnnxFunction(aten_add)`\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_add)`",
      "text":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.add.Tensor[name=add_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=10](\nadd_3: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_4_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_10: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_4_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_4_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_4_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_4_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_4_gamma: `TorchScriptTensor(f32[512])`,\nmul_4: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_11: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.add.Tensor[name=add_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=11](\nadd_3: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_4_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_10: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_4_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_4_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_4_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_4_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_4_gamma: `TorchScriptTensor(f32[512])`,\nmul_4: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_11: `TorchScriptTensor(f32[512, 512, 7])`,\n...\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: vocos_modules_ConvNeXtBlock. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: vocos_modules_ConvNeXtBlock. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_4_1[name=l__vocos____modules__backbone___convnext_4_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_4_1)[call_module]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_models_VocosBackbone)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=9](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\nl__vocos____modules__backbone___embed_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_2_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_3_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_4_1[name=l__vocos____modules__backbone___convnext_4_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_4[name=add_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_4)[placeholder]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_4[name=add_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_4[name=add_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_4)[placeholder]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_4[name=add_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/5/dwconv/weight[name=backbone_convnext_5_dwconv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/5/dwconv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_4: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/5/dwconv/weight[name=backbone_convnext_5_dwconv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/5/dwconv/bias[name=backbone_convnext_5_dwconv_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/5/dwconv/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_4: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_5_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/5/dwconv/bias[name=backbone_convnext_5_dwconv_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[512, 512, 7])`,\n`TorchScriptTensor(f32[512, 1, 7])`,\n`TorchScriptTensor(f32[512])`,\nList[length=1](\n1,\n),\nList[length=1](\n3,\n),\nList[length=1](\n1,\n),\nFalse,\nList[length=1](\n0,\n),\n512,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -1\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_4: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_5_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\nbackbone_convnext_5_dwconv_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nadd_4: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_5_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\nbackbone_convnext_5_dwconv_bias: `TorchScriptTensor(f32[512])`,\nconvolution_6: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv1d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv1d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_5_dwconv_1[name=l__vocos____modules__backbone___convnext_5_dwconv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_5_dwconv_1)[call_module]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_4: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_5_dwconv_1[name=l__vocos____modules__backbone___convnext_5_dwconv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 512, 7])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_4: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_5_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 46, in forward\n    x = x.transpose(1, 2)  # (B, C, T) -> (B, T, C)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:transpose_12[name=transpose_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(transpose_12)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 46, in forward\n    x = x.transpose(1, 2)  # (B, C, T) -> (B, T, C)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:transpose_12[name=transpose_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/5/norm/weight[name=backbone_convnext_5_norm_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/5/norm/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ntranspose_12: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/5/norm/weight[name=backbone_convnext_5_norm_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/5/norm/bias[name=backbone_convnext_5_norm_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/5/norm/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ntranspose_12: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_5_norm_weight: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/5/norm/bias[name=backbone_convnext_5_norm_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=5](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=1](\n512,\n),\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n1e-06,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_native_layer_norm)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_native_layer_norm)`",
      "text":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ntranspose_12: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_5_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_5_norm_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_18]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ntranspose_12: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_5_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_5_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm_6: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_18]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ntranspose_12: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_5_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_5_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm_6: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\ngetitem_18: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_normalization_LayerNorm. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_normalization_LayerNorm. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_5_norm_1[name=l__vocos____modules__backbone___convnext_5_norm_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_5_norm_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_4: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_5_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_12: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_5_norm_1[name=l__vocos____modules__backbone___convnext_5_norm_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_18[name=getitem_18]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_18)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_18[name=getitem_18]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=2](\n3584,\n512,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_20]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_18: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_20]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/5/pwconv1/weight[name=backbone_convnext_5_pwconv1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/5/pwconv1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_18: `TorchScriptTensor(f32[512, 7, 512])`,\nview_20: `TorchScriptTensor(f32[3584, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/5/pwconv1/weight[name=backbone_convnext_5_pwconv1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.t.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.t.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1536, 512])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_t)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_t)`",
      "text":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.t.default[name=t_10]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_18: `TorchScriptTensor(f32[512, 7, 512])`,\nview_20: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_5_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.t.default[name=t_10]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/5/pwconv1/bias[name=backbone_convnext_5_pwconv1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/5/pwconv1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngetitem_18: `TorchScriptTensor(f32[512, 7, 512])`,\nview_20: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_5_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_10: `TorchScriptTensor(f32[512, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/5/pwconv1/bias[name=backbone_convnext_5_pwconv1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[1536])`,\n`TorchScriptTensor(f32[3584, 512])`,\n`TorchScriptTensor(f32[512, 1536])`,\n)\n- onnx_kwargs: Dict[length=2](\nbeta: 1,\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_addmm)`\n### Failed: attribute 'beta' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_addmm)`",
      "text":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.addmm.default[name=addmm_10]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngetitem_18: `TorchScriptTensor(f32[512, 7, 512])`,\nview_20: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_5_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_10: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_5_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.addmm.default[name=addmm_10]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[3584, 1536])`,\nList[length=3](\n512,\n7,\n1536,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_21]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngetitem_18: `TorchScriptTensor(f32[512, 7, 512])`,\nview_20: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_5_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_10: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_5_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\naddmm_10: `TorchScriptTensor(f32[3584, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_21]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngetitem_18: `TorchScriptTensor(f32[512, 7, 512])`,\nview_20: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_5_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_10: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_5_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\naddmm_10: `TorchScriptTensor(f32[3584, 1536])`,\nview_21: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_linear_Linear. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_linear_Linear. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_5_pwconv1_1[name=l__vocos____modules__backbone___convnext_5_pwconv1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_5_pwconv1_1)[call_module]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nadd_4: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_5_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_12: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_5_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_5_pwconv1_1[name=l__vocos____modules__backbone___convnext_5_pwconv1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:view_21[name=view_21]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(view_21)[placeholder]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:view_21[name=view_21]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.gelu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::gelu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.gelu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.gelu.default. \nONNX Node: aten_gelu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::gelu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 7, 1536])`,\n)\n- onnx_kwargs: Dict[length=1](\napproximate: none,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_gelu)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_gelu)`",
      "text":"FX Node: aten.gelu.default. \nONNX Node: aten_gelu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.gelu.default[name=gelu_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nview_21: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.gelu.default[name=gelu_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nview_21: `TorchScriptTensor(f32[512, 7, 1536])`,\ngelu_5: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_GELU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_GELU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_5_act_1[name=l__vocos____modules__backbone___convnext_5_act_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_5_act_1)[call_module]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nadd_4: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_5_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_12: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_5_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_5_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_5_act_1[name=l__vocos____modules__backbone___convnext_5_act_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:gelu_5[name=gelu_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(gelu_5)[placeholder]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:gelu_5[name=gelu_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 1536])`,\nList[length=2](\n3584,\n1536,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_22]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngelu_5: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_22]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/5/pwconv2/weight[name=backbone_convnext_5_pwconv2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/5/pwconv2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngelu_5: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_22: `TorchScriptTensor(f32[3584, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/5/pwconv2/weight[name=backbone_convnext_5_pwconv2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.t.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.t.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 1536])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_t)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_t)`",
      "text":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.t.default[name=t_11]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngelu_5: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_22: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_5_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.t.default[name=t_11]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/5/pwconv2/bias[name=backbone_convnext_5_pwconv2_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/5/pwconv2/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngelu_5: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_22: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_5_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_11: `TorchScriptTensor(f32[1536, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/5/pwconv2/bias[name=backbone_convnext_5_pwconv2_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[3584, 1536])`,\n`TorchScriptTensor(f32[1536, 512])`,\n)\n- onnx_kwargs: Dict[length=2](\nbeta: 1,\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_addmm)`\n### Failed: attribute 'beta' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_addmm)`",
      "text":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.addmm.default[name=addmm_11]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngelu_5: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_22: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_5_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_11: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_5_pwconv2_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.addmm.default[name=addmm_11]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[3584, 512])`,\nList[length=3](\n512,\n7,\n512,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_23]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngelu_5: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_22: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_5_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_11: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_5_pwconv2_bias: `TorchScriptTensor(f32[512])`,\naddmm_11: `TorchScriptTensor(f32[3584, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_23]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngelu_5: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_22: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_5_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_11: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_5_pwconv2_bias: `TorchScriptTensor(f32[512])`,\naddmm_11: `TorchScriptTensor(f32[3584, 512])`,\nview_23: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_linear_Linear. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_linear_Linear. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_5_pwconv2_1[name=l__vocos____modules__backbone___convnext_5_pwconv2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_5_pwconv2_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nadd_4: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_5_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_12: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_5_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_5_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_5_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_5_pwconv2_1[name=l__vocos____modules__backbone___convnext_5_pwconv2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/5/gamma[name=backbone_convnext_5_gamma]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/5/gamma)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nadd_4: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_5_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_12: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_5_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_5_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_5_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_5_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 56, in forward\n    x = self.gamma * x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/5/gamma[name=backbone_convnext_5_gamma]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512, 7, 512])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_bool)`\n### Failed: input type mismatch for input 'self'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\n### Failed: input type mismatch for input 'other'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\nmatch score: 0\n## Checking perfect match...\n`OnnxFunction(aten_mul)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\nadd_4: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_5_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_12: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_5_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_5_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_5_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_5_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_5_gamma: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 56, in forward\n    x = self.gamma * x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_13]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=9](\nadd_4: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_5_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_12: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_5_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_5_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_5_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_5_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_5_gamma: `TorchScriptTensor(f32[512])`,\nmul_5: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 57, in forward\n    x = x.transpose(1, 2)  # (B, T, C) -> (B, C, T)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_13]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 512, 7])`,\n`TorchScriptTensor(f32[512, 512, 7])`,\n)\n- onnx_kwargs: Dict[length=1](\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_logical_or)`\n### Failed: attribute mismatch!\nActual {'alpha'} vs expected set()\nThe function is not a nearest match candidate.\n## Checking perfect match...\n`TracedOnnxFunction(aten_add)`\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_add)`",
      "text":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.add.Tensor[name=add_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=10](\nadd_4: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_5_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_12: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_5_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_5_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_5_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_5_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_5_gamma: `TorchScriptTensor(f32[512])`,\nmul_5: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_13: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.add.Tensor[name=add_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=11](\nadd_4: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_5_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_12: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_5_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_5_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_5_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_5_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_5_gamma: `TorchScriptTensor(f32[512])`,\nmul_5: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_13: `TorchScriptTensor(f32[512, 512, 7])`,\n...\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: vocos_modules_ConvNeXtBlock. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: vocos_modules_ConvNeXtBlock. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_5_1[name=l__vocos____modules__backbone___convnext_5_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_5_1)[call_module]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_models_VocosBackbone)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=10](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\nl__vocos____modules__backbone___embed_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_2_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_3_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_4_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_5_1[name=l__vocos____modules__backbone___convnext_5_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_5[name=add_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_5)[placeholder]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_5[name=add_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_5[name=add_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_5)[placeholder]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_5[name=add_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/6/dwconv/weight[name=backbone_convnext_6_dwconv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/6/dwconv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_5: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/6/dwconv/weight[name=backbone_convnext_6_dwconv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/6/dwconv/bias[name=backbone_convnext_6_dwconv_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/6/dwconv/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_5: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_6_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/6/dwconv/bias[name=backbone_convnext_6_dwconv_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[512, 512, 7])`,\n`TorchScriptTensor(f32[512, 1, 7])`,\n`TorchScriptTensor(f32[512])`,\nList[length=1](\n1,\n),\nList[length=1](\n3,\n),\nList[length=1](\n1,\n),\nFalse,\nList[length=1](\n0,\n),\n512,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -1\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_5: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_6_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\nbackbone_convnext_6_dwconv_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nadd_5: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_6_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\nbackbone_convnext_6_dwconv_bias: `TorchScriptTensor(f32[512])`,\nconvolution_7: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv1d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv1d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_6_dwconv_1[name=l__vocos____modules__backbone___convnext_6_dwconv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_6_dwconv_1)[call_module]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_5: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_6_dwconv_1[name=l__vocos____modules__backbone___convnext_6_dwconv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 512, 7])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_14]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_5: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_6_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 46, in forward\n    x = x.transpose(1, 2)  # (B, C, T) -> (B, T, C)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_14]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:transpose_14[name=transpose_14]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(transpose_14)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 46, in forward\n    x = x.transpose(1, 2)  # (B, C, T) -> (B, T, C)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:transpose_14[name=transpose_14]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/6/norm/weight[name=backbone_convnext_6_norm_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/6/norm/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ntranspose_14: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/6/norm/weight[name=backbone_convnext_6_norm_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/6/norm/bias[name=backbone_convnext_6_norm_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/6/norm/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ntranspose_14: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_6_norm_weight: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/6/norm/bias[name=backbone_convnext_6_norm_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=5](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=1](\n512,\n),\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n1e-06,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_native_layer_norm)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_native_layer_norm)`",
      "text":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ntranspose_14: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_6_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_6_norm_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_21]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ntranspose_14: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_6_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_6_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm_7: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_21]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ntranspose_14: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_6_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_6_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm_7: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\ngetitem_21: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_normalization_LayerNorm. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_normalization_LayerNorm. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_6_norm_1[name=l__vocos____modules__backbone___convnext_6_norm_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_6_norm_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_5: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_6_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_14: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_6_norm_1[name=l__vocos____modules__backbone___convnext_6_norm_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_21[name=getitem_21]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_21)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_21[name=getitem_21]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=2](\n3584,\n512,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_24]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_21: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_24]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/6/pwconv1/weight[name=backbone_convnext_6_pwconv1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/6/pwconv1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_21: `TorchScriptTensor(f32[512, 7, 512])`,\nview_24: `TorchScriptTensor(f32[3584, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/6/pwconv1/weight[name=backbone_convnext_6_pwconv1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.t.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.t.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1536, 512])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_t)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_t)`",
      "text":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.t.default[name=t_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_21: `TorchScriptTensor(f32[512, 7, 512])`,\nview_24: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_6_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.t.default[name=t_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/6/pwconv1/bias[name=backbone_convnext_6_pwconv1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/6/pwconv1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngetitem_21: `TorchScriptTensor(f32[512, 7, 512])`,\nview_24: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_6_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_12: `TorchScriptTensor(f32[512, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/6/pwconv1/bias[name=backbone_convnext_6_pwconv1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[1536])`,\n`TorchScriptTensor(f32[3584, 512])`,\n`TorchScriptTensor(f32[512, 1536])`,\n)\n- onnx_kwargs: Dict[length=2](\nbeta: 1,\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_addmm)`\n### Failed: attribute 'beta' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_addmm)`",
      "text":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.addmm.default[name=addmm_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngetitem_21: `TorchScriptTensor(f32[512, 7, 512])`,\nview_24: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_6_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_12: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_6_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.addmm.default[name=addmm_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[3584, 1536])`,\nList[length=3](\n512,\n7,\n1536,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_25]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngetitem_21: `TorchScriptTensor(f32[512, 7, 512])`,\nview_24: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_6_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_12: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_6_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\naddmm_12: `TorchScriptTensor(f32[3584, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_25]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngetitem_21: `TorchScriptTensor(f32[512, 7, 512])`,\nview_24: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_6_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_12: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_6_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\naddmm_12: `TorchScriptTensor(f32[3584, 1536])`,\nview_25: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_linear_Linear. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_linear_Linear. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_6_pwconv1_1[name=l__vocos____modules__backbone___convnext_6_pwconv1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_6_pwconv1_1)[call_module]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nadd_5: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_6_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_14: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_6_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_6_pwconv1_1[name=l__vocos____modules__backbone___convnext_6_pwconv1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:view_25[name=view_25]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(view_25)[placeholder]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:view_25[name=view_25]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.gelu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::gelu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.gelu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.gelu.default. \nONNX Node: aten_gelu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::gelu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 7, 1536])`,\n)\n- onnx_kwargs: Dict[length=1](\napproximate: none,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_gelu)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_gelu)`",
      "text":"FX Node: aten.gelu.default. \nONNX Node: aten_gelu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.gelu.default[name=gelu_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nview_25: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.gelu.default[name=gelu_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nview_25: `TorchScriptTensor(f32[512, 7, 1536])`,\ngelu_6: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_GELU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_GELU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_6_act_1[name=l__vocos____modules__backbone___convnext_6_act_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_6_act_1)[call_module]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nadd_5: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_6_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_14: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_6_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_6_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_6_act_1[name=l__vocos____modules__backbone___convnext_6_act_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:gelu_6[name=gelu_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(gelu_6)[placeholder]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:gelu_6[name=gelu_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 1536])`,\nList[length=2](\n3584,\n1536,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_26]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngelu_6: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_26]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/6/pwconv2/weight[name=backbone_convnext_6_pwconv2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/6/pwconv2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngelu_6: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_26: `TorchScriptTensor(f32[3584, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/6/pwconv2/weight[name=backbone_convnext_6_pwconv2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.t.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.t.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 1536])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_t)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_t)`",
      "text":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.t.default[name=t_13]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngelu_6: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_26: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_6_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.t.default[name=t_13]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/6/pwconv2/bias[name=backbone_convnext_6_pwconv2_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/6/pwconv2/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngelu_6: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_26: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_6_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_13: `TorchScriptTensor(f32[1536, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/6/pwconv2/bias[name=backbone_convnext_6_pwconv2_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[3584, 1536])`,\n`TorchScriptTensor(f32[1536, 512])`,\n)\n- onnx_kwargs: Dict[length=2](\nbeta: 1,\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_addmm)`\n### Failed: attribute 'beta' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_addmm)`",
      "text":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.addmm.default[name=addmm_13]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngelu_6: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_26: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_6_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_13: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_6_pwconv2_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.addmm.default[name=addmm_13]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[3584, 512])`,\nList[length=3](\n512,\n7,\n512,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_27]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngelu_6: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_26: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_6_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_13: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_6_pwconv2_bias: `TorchScriptTensor(f32[512])`,\naddmm_13: `TorchScriptTensor(f32[3584, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_27]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngelu_6: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_26: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_6_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_13: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_6_pwconv2_bias: `TorchScriptTensor(f32[512])`,\naddmm_13: `TorchScriptTensor(f32[3584, 512])`,\nview_27: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_linear_Linear. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_linear_Linear. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_6_pwconv2_1[name=l__vocos____modules__backbone___convnext_6_pwconv2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_6_pwconv2_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nadd_5: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_6_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_14: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_6_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_6_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_6_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_6_pwconv2_1[name=l__vocos____modules__backbone___convnext_6_pwconv2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/6/gamma[name=backbone_convnext_6_gamma]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/6/gamma)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nadd_5: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_6_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_14: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_6_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_6_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_6_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_6_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 56, in forward\n    x = self.gamma * x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/6/gamma[name=backbone_convnext_6_gamma]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512, 7, 512])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_bool)`\n### Failed: input type mismatch for input 'self'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\n### Failed: input type mismatch for input 'other'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\nmatch score: 0\n## Checking perfect match...\n`OnnxFunction(aten_mul)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\nadd_5: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_6_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_14: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_6_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_6_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_6_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_6_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_6_gamma: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 56, in forward\n    x = self.gamma * x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_15]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=9](\nadd_5: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_6_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_14: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_6_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_6_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_6_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_6_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_6_gamma: `TorchScriptTensor(f32[512])`,\nmul_6: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 57, in forward\n    x = x.transpose(1, 2)  # (B, T, C) -> (B, C, T)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_15]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 512, 7])`,\n`TorchScriptTensor(f32[512, 512, 7])`,\n)\n- onnx_kwargs: Dict[length=1](\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_logical_or)`\n### Failed: attribute mismatch!\nActual {'alpha'} vs expected set()\nThe function is not a nearest match candidate.\n## Checking perfect match...\n`TracedOnnxFunction(aten_add)`\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_add)`",
      "text":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.add.Tensor[name=add_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=10](\nadd_5: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_6_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_14: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_6_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_6_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_6_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_6_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_6_gamma: `TorchScriptTensor(f32[512])`,\nmul_6: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_15: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.add.Tensor[name=add_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=11](\nadd_5: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_6_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_14: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_6_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_6_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_6_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_6_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_6_gamma: `TorchScriptTensor(f32[512])`,\nmul_6: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_15: `TorchScriptTensor(f32[512, 512, 7])`,\n...\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: vocos_modules_ConvNeXtBlock. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: vocos_modules_ConvNeXtBlock. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_6_1[name=l__vocos____modules__backbone___convnext_6_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_6_1)[call_module]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_models_VocosBackbone)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=11](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\nl__vocos____modules__backbone___embed_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_2_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_3_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_4_1: `TorchScriptTensor(f32[512, 512, 7])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_6_1[name=l__vocos____modules__backbone___convnext_6_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_6[name=add_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_6)[placeholder]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_6[name=add_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_6[name=add_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_6)[placeholder]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_6[name=add_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/7/dwconv/weight[name=backbone_convnext_7_dwconv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/7/dwconv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_6: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/7/dwconv/weight[name=backbone_convnext_7_dwconv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/7/dwconv/bias[name=backbone_convnext_7_dwconv_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/7/dwconv/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_6: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_7_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/7/dwconv/bias[name=backbone_convnext_7_dwconv_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[512, 512, 7])`,\n`TorchScriptTensor(f32[512, 1, 7])`,\n`TorchScriptTensor(f32[512])`,\nList[length=1](\n1,\n),\nList[length=1](\n3,\n),\nList[length=1](\n1,\n),\nFalse,\nList[length=1](\n0,\n),\n512,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -1\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_6: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_7_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\nbackbone_convnext_7_dwconv_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nadd_6: `TorchScriptTensor(f32[512, 512, 7])`,\nbackbone_convnext_7_dwconv_weight: `TorchScriptTensor(f32[512, 1, 7])`,\nbackbone_convnext_7_dwconv_bias: `TorchScriptTensor(f32[512])`,\nconvolution_8: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv1d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv1d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv1d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_7_dwconv_1[name=l__vocos____modules__backbone___convnext_7_dwconv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_7_dwconv_1)[call_module]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_6: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_7_dwconv_1[name=l__vocos____modules__backbone___convnext_7_dwconv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 512, 7])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_16]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_6: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_7_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 46, in forward\n    x = x.transpose(1, 2)  # (B, C, T) -> (B, T, C)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_16]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:transpose_16[name=transpose_16]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(transpose_16)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 46, in forward\n    x = x.transpose(1, 2)  # (B, C, T) -> (B, T, C)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:transpose_16[name=transpose_16]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/7/norm/weight[name=backbone_convnext_7_norm_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/7/norm/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ntranspose_16: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/7/norm/weight[name=backbone_convnext_7_norm_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/7/norm/bias[name=backbone_convnext_7_norm_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/7/norm/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ntranspose_16: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_7_norm_weight: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/7/norm/bias[name=backbone_convnext_7_norm_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=5](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=1](\n512,\n),\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n1e-06,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_native_layer_norm)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_native_layer_norm)`",
      "text":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ntranspose_16: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_7_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_7_norm_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_24]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ntranspose_16: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_7_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_7_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm_8: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_24]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ntranspose_16: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_7_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_convnext_7_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm_8: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\ngetitem_24: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_normalization_LayerNorm. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_normalization_LayerNorm. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_7_norm_1[name=l__vocos____modules__backbone___convnext_7_norm_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_7_norm_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_6: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_7_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_16: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_7_norm_1[name=l__vocos____modules__backbone___convnext_7_norm_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_24[name=getitem_24]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_24)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 51, in forward\n    x = self.norm(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_24[name=getitem_24]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=2](\n3584,\n512,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_28]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_24: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_28]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/7/pwconv1/weight[name=backbone_convnext_7_pwconv1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/7/pwconv1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_24: `TorchScriptTensor(f32[512, 7, 512])`,\nview_28: `TorchScriptTensor(f32[3584, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/7/pwconv1/weight[name=backbone_convnext_7_pwconv1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.t.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.t.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1536, 512])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_t)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_t)`",
      "text":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.t.default[name=t_14]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_24: `TorchScriptTensor(f32[512, 7, 512])`,\nview_28: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_7_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.t.default[name=t_14]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/7/pwconv1/bias[name=backbone_convnext_7_pwconv1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/7/pwconv1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngetitem_24: `TorchScriptTensor(f32[512, 7, 512])`,\nview_28: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_7_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_14: `TorchScriptTensor(f32[512, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/7/pwconv1/bias[name=backbone_convnext_7_pwconv1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[1536])`,\n`TorchScriptTensor(f32[3584, 512])`,\n`TorchScriptTensor(f32[512, 1536])`,\n)\n- onnx_kwargs: Dict[length=2](\nbeta: 1,\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_addmm)`\n### Failed: attribute 'beta' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_addmm)`",
      "text":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.addmm.default[name=addmm_14]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngetitem_24: `TorchScriptTensor(f32[512, 7, 512])`,\nview_28: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_7_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_14: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_7_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.addmm.default[name=addmm_14]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[3584, 1536])`,\nList[length=3](\n512,\n7,\n1536,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_29]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngetitem_24: `TorchScriptTensor(f32[512, 7, 512])`,\nview_28: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_7_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_14: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_7_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\naddmm_14: `TorchScriptTensor(f32[3584, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_29]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngetitem_24: `TorchScriptTensor(f32[512, 7, 512])`,\nview_28: `TorchScriptTensor(f32[3584, 512])`,\nbackbone_convnext_7_pwconv1_weight: `TorchScriptTensor(f32[1536, 512])`,\nt_14: `TorchScriptTensor(f32[512, 1536])`,\nbackbone_convnext_7_pwconv1_bias: `TorchScriptTensor(f32[1536])`,\naddmm_14: `TorchScriptTensor(f32[3584, 1536])`,\nview_29: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_linear_Linear. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_linear_Linear. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_7_pwconv1_1[name=l__vocos____modules__backbone___convnext_7_pwconv1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_7_pwconv1_1)[call_module]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nadd_6: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_7_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_16: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_7_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_7_pwconv1_1[name=l__vocos____modules__backbone___convnext_7_pwconv1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:view_29[name=view_29]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(view_29)[placeholder]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 52, in forward\n    x = self.pwconv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:view_29[name=view_29]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.gelu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::gelu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.gelu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.gelu.default. \nONNX Node: aten_gelu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::gelu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 7, 1536])`,\n)\n- onnx_kwargs: Dict[length=1](\napproximate: none,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_gelu)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_gelu)`",
      "text":"FX Node: aten.gelu.default. \nONNX Node: aten_gelu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.gelu.default[name=gelu_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.gelu.default)[call_function]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nview_29: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.gelu.default[name=gelu_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nview_29: `TorchScriptTensor(f32[512, 7, 1536])`,\ngelu_7: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_GELU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_GELU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_GELU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_7_act_1[name=l__vocos____modules__backbone___convnext_7_act_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_7_act_1)[call_module]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nadd_6: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_7_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_16: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_7_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_7_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_7_act_1[name=l__vocos____modules__backbone___convnext_7_act_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:gelu_7[name=gelu_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(gelu_7)[placeholder]:Tensor(f32[512, 7, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 53, in forward\n    x = self.act(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:gelu_7[name=gelu_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 1536])`,\nList[length=2](\n3584,\n1536,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_30]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 1536])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngelu_7: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_30]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/7/pwconv2/weight[name=backbone_convnext_7_pwconv2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/7/pwconv2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngelu_7: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_30: `TorchScriptTensor(f32[3584, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/7/pwconv2/weight[name=backbone_convnext_7_pwconv2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.t.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.t.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 1536])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_t)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_t)`",
      "text":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.t.default[name=t_15]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[1536, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngelu_7: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_30: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_7_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.t.default[name=t_15]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/7/pwconv2/bias[name=backbone_convnext_7_pwconv2_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/7/pwconv2/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngelu_7: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_30: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_7_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_15: `TorchScriptTensor(f32[1536, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/7/pwconv2/bias[name=backbone_convnext_7_pwconv2_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[3584, 1536])`,\n`TorchScriptTensor(f32[1536, 512])`,\n)\n- onnx_kwargs: Dict[length=2](\nbeta: 1,\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_addmm)`\n### Failed: attribute 'beta' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_addmm)`",
      "text":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.addmm.default[name=addmm_15]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngelu_7: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_30: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_7_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_15: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_7_pwconv2_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.addmm.default[name=addmm_15]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[3584, 512])`,\nList[length=3](\n512,\n7,\n512,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_31]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngelu_7: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_30: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_7_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_15: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_7_pwconv2_bias: `TorchScriptTensor(f32[512])`,\naddmm_15: `TorchScriptTensor(f32[3584, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_31]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngelu_7: `TorchScriptTensor(f32[512, 7, 1536])`,\nview_30: `TorchScriptTensor(f32[3584, 1536])`,\nbackbone_convnext_7_pwconv2_weight: `TorchScriptTensor(f32[512, 1536])`,\nt_15: `TorchScriptTensor(f32[1536, 512])`,\nbackbone_convnext_7_pwconv2_bias: `TorchScriptTensor(f32[512])`,\naddmm_15: `TorchScriptTensor(f32[3584, 512])`,\nview_31: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_linear_Linear. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_linear_Linear. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_7_pwconv2_1[name=l__vocos____modules__backbone___convnext_7_pwconv2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_7_pwconv2_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nadd_6: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_7_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_16: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_7_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_7_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_7_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 54, in forward\n    x = self.pwconv2(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_7_pwconv2_1[name=l__vocos____modules__backbone___convnext_7_pwconv2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/convnext/7/gamma[name=backbone_convnext_7_gamma]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/convnext/7/gamma)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nadd_6: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_7_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_16: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_7_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_7_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_7_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_7_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 56, in forward\n    x = self.gamma * x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/convnext/7/gamma[name=backbone_convnext_7_gamma]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512, 7, 512])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_bool)`\n### Failed: input type mismatch for input 'self'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\n### Failed: input type mismatch for input 'other'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\nmatch score: 0\n## Checking perfect match...\n`OnnxFunction(aten_mul)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\nadd_6: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_7_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_16: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_7_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_7_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_7_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_7_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_7_gamma: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 56, in forward\n    x = self.gamma * x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_17]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=9](\nadd_6: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_7_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_16: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_7_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_7_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_7_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_7_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_7_gamma: `TorchScriptTensor(f32[512])`,\nmul_7: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 57, in forward\n    x = x.transpose(1, 2)  # (B, T, C) -> (B, C, T)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_17]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 512, 7])`,\n`TorchScriptTensor(f32[512, 512, 7])`,\n)\n- onnx_kwargs: Dict[length=1](\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_logical_or)`\n### Failed: attribute mismatch!\nActual {'alpha'} vs expected set()\nThe function is not a nearest match candidate.\n## Checking perfect match...\n`TracedOnnxFunction(aten_add)`\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_add)`",
      "text":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.add.Tensor[name=add_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=10](\nadd_6: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_7_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_16: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_7_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_7_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_7_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_7_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_7_gamma: `TorchScriptTensor(f32[512])`,\nmul_7: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_17: `TorchScriptTensor(f32[512, 512, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 59, in forward\n    x = residual + x\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.add.Tensor[name=add_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=11](\nadd_6: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_7_dwconv_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose_16: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_7_norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___convnext_7_pwconv1_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_7_act_1: `TorchScriptTensor(f32[512, 7, 1536])`,\nl__vocos____modules__backbone___convnext_7_pwconv2_1: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_convnext_7_gamma: `TorchScriptTensor(f32[512])`,\nmul_7: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_17: `TorchScriptTensor(f32[512, 512, 7])`,\n...\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: vocos_modules_ConvNeXtBlock. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(vocos_modules_ConvNeXtBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: vocos_modules_ConvNeXtBlock. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___convnext_7_1[name=l__vocos____modules__backbone___convnext_7_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___convnext_7_1)[call_module]:Tensor(f32[512, 512, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_models_VocosBackbone)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=12](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\nl__vocos____modules__backbone___embed_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_2_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_3_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_4_1: `TorchScriptTensor(f32[512, 512, 7])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 87, in forward\n    x = conv_block(x, cond_embedding_id=bandwidth_id)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/modules.py\", line 45, in forward\n    x = self.dwconv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___convnext_7_1[name=l__vocos____modules__backbone___convnext_7_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 512, 7])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_18]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_models_VocosBackbone)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=13](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\nl__vocos____modules__backbone___embed_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_2_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_3_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_4_1: `TorchScriptTensor(f32[512, 512, 7])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 88, in forward\n    x = self.final_layer_norm(x.transpose(1, 2))\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_18]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:transpose_18[name=transpose_18]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(transpose_18)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 88, in forward\n    x = self.final_layer_norm(x.transpose(1, 2))\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:transpose_18[name=transpose_18]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/final_layer_norm/weight[name=backbone_final_layer_norm_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/final_layer_norm/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ntranspose_18: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 88, in forward\n    x = self.final_layer_norm(x.transpose(1, 2))\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/final_layer_norm/weight[name=backbone_final_layer_norm_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:backbone/final_layer_norm/bias[name=backbone_final_layer_norm_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(backbone/final_layer_norm/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ntranspose_18: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_final_layer_norm_weight: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 88, in forward\n    x = self.final_layer_norm(x.transpose(1, 2))\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:backbone/final_layer_norm/bias[name=backbone_final_layer_norm_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.native_layer_norm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::native_layer_norm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=5](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=1](\n512,\n),\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n1e-06,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_native_layer_norm)`\nmatch score: 4\n## Return values\n`TracedOnnxFunction(aten_native_layer_norm)`",
      "text":"FX Node: aten.native_layer_norm.default. \nONNX Node: aten_native_layer_norm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.native_layer_norm.default)[call_function]:Tuple[length=3](\nTensor(f32[512, 7, 512]),\nTensor(f32[512, 7, 1]),\nTensor(f32[512, 7, 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ntranspose_18: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_final_layer_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_final_layer_norm_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 88, in forward\n    x = self.final_layer_norm(x.transpose(1, 2))\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.native_layer_norm.default[name=native_layer_norm_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_27]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ntranspose_18: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_final_layer_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_final_layer_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm_9: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 88, in forward\n    x = self.final_layer_norm(x.transpose(1, 2))\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_27]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ntranspose_18: `TorchScriptTensor(f32[512, 7, 512])`,\nbackbone_final_layer_norm_weight: `TorchScriptTensor(f32[512])`,\nbackbone_final_layer_norm_bias: `TorchScriptTensor(f32[512])`,\nnative_layer_norm_9: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 512])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n`TorchScriptTensor(f32[512, 7, 1])`,\n),\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_normalization_LayerNorm. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_normalization_LayerNorm)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_normalization_LayerNorm. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__backbone___final_layer_norm_1[name=l__vocos____modules__backbone___final_layer_norm_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__backbone___final_layer_norm_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_models_VocosBackbone)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=14](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\nl__vocos____modules__backbone___embed_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_2_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_3_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_4_1: `TorchScriptTensor(f32[512, 512, 7])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 88, in forward\n    x = self.final_layer_norm(x.transpose(1, 2))\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__backbone___final_layer_norm_1[name=l__vocos____modules__backbone___final_layer_norm_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(vocos_models_VocosBackbone)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=15](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\nl__vocos____modules__backbone___embed_1: `TorchScriptTensor(f32[512, 512, 7])`,\ntranspose: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__backbone___norm_1: `TorchScriptTensor(f32[512, 7, 512])`,\ntranspose_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_0_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_1_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_2_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_3_1: `TorchScriptTensor(f32[512, 512, 7])`,\nl__vocos____modules__backbone___convnext_4_1: `TorchScriptTensor(f32[512, 512, 7])`,\n...\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: vocos_models_VocosBackbone. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(vocos_models_VocosBackbone)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: vocos_models_VocosBackbone. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:vocos____modules__backbone_1[name=vocos____modules__backbone_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(vocos____modules__backbone_1)[call_module]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 79, in forward\n    x = self.embed(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:vocos____modules__backbone_1[name=vocos____modules__backbone_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_27[name=getitem_27]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_27)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(vocos_heads_ISTFTHead)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 88, in forward\n    x = self.final_layer_norm(x.transpose(1, 2))\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_27[name=getitem_27]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_27[name=getitem_27]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_27)[placeholder]:Tensor(f32[512, 7, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 112, in decode\n    x = self.backbone(features_input, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/models.py\", line 88, in forward\n    x = self.final_layer_norm(x.transpose(1, 2))\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_27[name=getitem_27]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 512])`,\nList[length=2](\n3584,\n512,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_32]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[3584, 512])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 55, in forward\n    x = self.out(x).transpose(1, 2)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_32]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:head/out/weight[name=head_out_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(head/out/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nview_32: `TorchScriptTensor(f32[3584, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 55, in forward\n    x = self.out(x).transpose(1, 2)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:head/out/weight[name=head_out_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.t.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1026])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.t.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1026])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::t.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1026, 512])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_t)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_t)`",
      "text":"FX Node: aten.t.default. \nONNX Node: aten_t[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.t.default[name=t_16]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.t.default)[call_function]:Tensor(f32[512, 1026])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nview_32: `TorchScriptTensor(f32[3584, 512])`,\nhead_out_weight: `TorchScriptTensor(f32[1026, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 55, in forward\n    x = self.out(x).transpose(1, 2)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.t.default[name=t_16]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:head/out/bias[name=head_out_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(head/out/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nview_32: `TorchScriptTensor(f32[3584, 512])`,\nhead_out_weight: `TorchScriptTensor(f32[1026, 512])`,\nt_16: `TorchScriptTensor(f32[512, 1026])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 55, in forward\n    x = self.out(x).transpose(1, 2)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:head/out/bias[name=head_out_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1026])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.addmm.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1026])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::addmm.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[1026])`,\n`TorchScriptTensor(f32[3584, 512])`,\n`TorchScriptTensor(f32[512, 1026])`,\n)\n- onnx_kwargs: Dict[length=2](\nbeta: 1,\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_addmm)`\n### Failed: attribute 'beta' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_addmm)`",
      "text":"FX Node: aten.addmm.default. \nONNX Node: aten_addmm[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.addmm.default[name=addmm_16]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.addmm.default)[call_function]:Tensor(f32[3584, 1026])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nview_32: `TorchScriptTensor(f32[3584, 512])`,\nhead_out_weight: `TorchScriptTensor(f32[1026, 512])`,\nt_16: `TorchScriptTensor(f32[512, 1026])`,\nhead_out_bias: `TorchScriptTensor(f32[1026])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 55, in forward\n    x = self.out(x).transpose(1, 2)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.addmm.default[name=addmm_16]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1026])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1026])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[3584, 1026])`,\nList[length=3](\n512,\n7,\n1026,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_33]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7, 1026])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nview_32: `TorchScriptTensor(f32[3584, 512])`,\nhead_out_weight: `TorchScriptTensor(f32[1026, 512])`,\nt_16: `TorchScriptTensor(f32[512, 1026])`,\nhead_out_bias: `TorchScriptTensor(f32[1026])`,\naddmm_16: `TorchScriptTensor(f32[3584, 1026])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 55, in forward\n    x = self.out(x).transpose(1, 2)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_33]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nview_32: `TorchScriptTensor(f32[3584, 512])`,\nhead_out_weight: `TorchScriptTensor(f32[1026, 512])`,\nt_16: `TorchScriptTensor(f32[512, 1026])`,\nhead_out_bias: `TorchScriptTensor(f32[1026])`,\naddmm_16: `TorchScriptTensor(f32[3584, 1026])`,\nview_33: `TorchScriptTensor(f32[512, 7, 1026])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_linear_Linear. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_linear_Linear)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_linear_Linear. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__head___out_1[name=l__vocos____modules__head___out_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__head___out_1)[call_module]:Tensor(f32[512, 7, 1026])\n- fx_graph_module: torch.fx.GraphModule(vocos_heads_ISTFTHead)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 55, in forward\n    x = self.out(x).transpose(1, 2)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:L__vocos____modules__head___out_1[name=l__vocos____modules__head___out_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 1026, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 1026, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 7, 1026])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_19]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(f32[512, 1026, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_heads_ISTFTHead)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__head___out_1: `TorchScriptTensor(f32[512, 7, 1026])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 55, in forward\n    x = self.out(x).transpose(1, 2)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_19]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.split.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.split.Tensor)[call_function]:List[length=2](\nTensor(f32[512, 513, 7]),\nTensor(f32[512, 513, 7]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::split.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.split.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.split.Tensor. \nONNX Node: aten_split[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.split.Tensor)[call_function]:List[length=2](\nTensor(f32[512, 513, 7]),\nTensor(f32[512, 513, 7]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::split.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 1026, 7])`,\n513,\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_split)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_split)`",
      "text":"FX Node: aten.split.Tensor. \nONNX Node: aten_split[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.split.Tensor[name=split]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.split.Tensor)[call_function]:List[length=2](\nTensor(f32[512, 513, 7]),\nTensor(f32[512, 513, 7]),\n)\n- fx_graph_module: torch.fx.GraphModule(vocos_heads_ISTFTHead)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__head___out_1: `TorchScriptTensor(f32[512, 7, 1026])`,\ntranspose_19: `TorchScriptTensor(f32[512, 1026, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 56, in forward\n    mag, p = x.chunk(2, dim=1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.split.Tensor[name=split]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: '<built-in function getitem>' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 513, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::getitem.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: '<built-in function getitem>' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: <built-in function getitem>. \nONNX Node: aten_getitem[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 513, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::getitem.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor()`,\n0,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_getitem)`\n### Failed: input type mismatch for input 'self'!\nActual set() vs\nExpected {'seq(tensor(complex128))', 'seq(tensor(float))', 'seq(tensor(bool))', 'seq(tensor(float16))', 'seq(tensor(int64))', 'seq(tensor(int16))', 'seq(tensor(uint8))', 'seq(tensor(complex64))', 'seq(tensor(bfloat16))', 'seq(tensor(double))', 'seq(tensor(int8))', 'seq(tensor(int32))'}\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`OnnxFunction(aten_getitem)`",
      "text":"FX Node: <built-in function getitem>. \nONNX Node: aten_getitem[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_30]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 513, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_heads_ISTFTHead)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__head___out_1: `TorchScriptTensor(f32[512, 7, 1026])`,\ntranspose_19: `TorchScriptTensor(f32[512, 1026, 7])`,\nsplit: `TorchScriptTensor()`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 56, in forward\n    mag, p = x.chunk(2, dim=1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_30]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: '<built-in function getitem>' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 513, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::getitem.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: '<built-in function getitem>' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: <built-in function getitem>. \nONNX Node: aten_getitem[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 513, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::getitem.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor()`,\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_getitem)`\n### Failed: input type mismatch for input 'self'!\nActual set() vs\nExpected {'seq(tensor(complex128))', 'seq(tensor(float))', 'seq(tensor(bool))', 'seq(tensor(float16))', 'seq(tensor(int64))', 'seq(tensor(int16))', 'seq(tensor(uint8))', 'seq(tensor(complex64))', 'seq(tensor(bfloat16))', 'seq(tensor(double))', 'seq(tensor(int8))', 'seq(tensor(int32))'}\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`OnnxFunction(aten_getitem)`",
      "text":"FX Node: <built-in function getitem>. \nONNX Node: aten_getitem[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_31]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[512, 513, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_heads_ISTFTHead)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__head___out_1: `TorchScriptTensor(f32[512, 7, 1026])`,\ntranspose_19: `TorchScriptTensor(f32[512, 1026, 7])`,\nsplit: `TorchScriptTensor()`,\ngetitem_30: `TorchScriptTensor(f32[512, 513, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 56, in forward\n    mag, p = x.chunk(2, dim=1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_31]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.exp.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.exp.default)[call_function]:Tensor(f32[512, 513, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::exp.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.exp.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.exp.default. \nONNX Node: aten_exp[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.exp.default)[call_function]:Tensor(f32[512, 513, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::exp.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 513, 7])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_exp)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_exp)`",
      "text":"FX Node: aten.exp.default. \nONNX Node: aten_exp[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.exp.default[name=exp]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.exp.default)[call_function]:Tensor(f32[512, 513, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_heads_ISTFTHead)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__head___out_1: `TorchScriptTensor(f32[512, 7, 1026])`,\ntranspose_19: `TorchScriptTensor(f32[512, 1026, 7])`,\nsplit: `TorchScriptTensor()`,\ngetitem_30: `TorchScriptTensor(f32[512, 513, 7])`,\ngetitem_31: `TorchScriptTensor(f32[512, 513, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 57, in forward\n    mag = torch.exp(mag)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.exp.default[name=exp]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.clamp.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.clamp.default)[call_function]:Tensor(f32[512, 513, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::clamp.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.clamp.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.clamp.default. \nONNX Node: aten_clamp[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.clamp.default)[call_function]:Tensor(f32[512, 513, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::clamp.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 513, 7])`,\n<class 'NoneType'>,\n100.0,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_clamp)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_clamp)`",
      "text":"FX Node: aten.clamp.default. \nONNX Node: aten_clamp[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.clamp.default[name=clamp]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.clamp.default)[call_function]:Tensor(f32[512, 513, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_heads_ISTFTHead)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__head___out_1: `TorchScriptTensor(f32[512, 7, 1026])`,\ntranspose_19: `TorchScriptTensor(f32[512, 1026, 7])`,\nsplit: `TorchScriptTensor()`,\ngetitem_30: `TorchScriptTensor(f32[512, 513, 7])`,\ngetitem_31: `TorchScriptTensor(f32[512, 513, 7])`,\nexp: `TorchScriptTensor(f32[512, 513, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 58, in forward\n    mag = torch.clip(mag, max=1e2)  # safeguard to prevent excessively large magnitudes\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.clamp.default[name=clamp]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.cos.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.cos.default)[call_function]:Tensor(f32[512, 513, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::cos.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.cos.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.cos.default. \nONNX Node: aten_cos[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.cos.default)[call_function]:Tensor(f32[512, 513, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::cos.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 513, 7])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_cos)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_cos)`",
      "text":"FX Node: aten.cos.default. \nONNX Node: aten_cos[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.cos.default[name=cos]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.cos.default)[call_function]:Tensor(f32[512, 513, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_heads_ISTFTHead)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__head___out_1: `TorchScriptTensor(f32[512, 7, 1026])`,\ntranspose_19: `TorchScriptTensor(f32[512, 1026, 7])`,\nsplit: `TorchScriptTensor()`,\ngetitem_30: `TorchScriptTensor(f32[512, 513, 7])`,\ngetitem_31: `TorchScriptTensor(f32[512, 513, 7])`,\nexp: `TorchScriptTensor(f32[512, 513, 7])`,\nclamp: `TorchScriptTensor(f32[512, 513, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 60, in forward\n    x = torch.cos(p)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.cos.default[name=cos]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.sin.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sin.default)[call_function]:Tensor(f32[512, 513, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::sin.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.sin.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.sin.default. \nONNX Node: aten_sin[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sin.default)[call_function]:Tensor(f32[512, 513, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::sin.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 513, 7])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_sin)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_sin)`",
      "text":"FX Node: aten.sin.default. \nONNX Node: aten_sin[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.sin.default[name=sin]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.sin.default)[call_function]:Tensor(f32[512, 513, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_heads_ISTFTHead)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=9](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__head___out_1: `TorchScriptTensor(f32[512, 7, 1026])`,\ntranspose_19: `TorchScriptTensor(f32[512, 1026, 7])`,\nsplit: `TorchScriptTensor()`,\ngetitem_30: `TorchScriptTensor(f32[512, 513, 7])`,\ngetitem_31: `TorchScriptTensor(f32[512, 513, 7])`,\nexp: `TorchScriptTensor(f32[512, 513, 7])`,\nclamp: `TorchScriptTensor(f32[512, 513, 7])`,\ncos: `TorchScriptTensor(f32[512, 513, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 61, in forward\n    y = torch.sin(p)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.sin.default[name=sin]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'prims.convert_element_type.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(prims.convert_element_type.default)[call_function]:Tensor(c64[512, 513, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(prims::convert_element_type.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'prims.convert_element_type.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: prims.convert_element_type.default. \nONNX Node: prims_convert_element_type[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(prims.convert_element_type.default)[call_function]:Tensor(c64[512, 513, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(prims::convert_element_type.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 513, 7])`,\n)\n- onnx_kwargs: Dict[length=1](\ndtype: 14,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(prims_convert_element_type)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(prims_convert_element_type)`",
      "text":"FX Node: prims.convert_element_type.default. \nONNX Node: prims_convert_element_type[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:prims.convert_element_type.default[name=convert_element_type_default]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(prims.convert_element_type.default)[call_function]:Tensor(c64[512, 513, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_heads_ISTFTHead)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=10](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__head___out_1: `TorchScriptTensor(f32[512, 7, 1026])`,\ntranspose_19: `TorchScriptTensor(f32[512, 1026, 7])`,\nsplit: `TorchScriptTensor()`,\ngetitem_30: `TorchScriptTensor(f32[512, 513, 7])`,\ngetitem_31: `TorchScriptTensor(f32[512, 513, 7])`,\nexp: `TorchScriptTensor(f32[512, 513, 7])`,\nclamp: `TorchScriptTensor(f32[512, 513, 7])`,\ncos: `TorchScriptTensor(f32[512, 513, 7])`,\nsin: `TorchScriptTensor(f32[512, 513, 7])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 67, in forward\n    S = mag * (x + 1j * y)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:prims.convert_element_type.default[name=convert_element_type_default]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(c64[512, 513, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=True),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul_complex[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(c64[512, 513, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=True),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 513, 7, 2])`,\n<class 'complex'>,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_complex)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul_complex)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul_complex[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(c64[512, 513, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_heads_ISTFTHead)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=11](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__head___out_1: `TorchScriptTensor(f32[512, 7, 1026])`,\ntranspose_19: `TorchScriptTensor(f32[512, 1026, 7])`,\nsplit: `TorchScriptTensor()`,\ngetitem_30: `TorchScriptTensor(f32[512, 513, 7])`,\ngetitem_31: `TorchScriptTensor(f32[512, 513, 7])`,\nexp: `TorchScriptTensor(f32[512, 513, 7])`,\nclamp: `TorchScriptTensor(f32[512, 513, 7])`,\ncos: `TorchScriptTensor(f32[512, 513, 7])`,\nsin: `TorchScriptTensor(f32[512, 513, 7])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 67, in forward\n    S = mag * (x + 1j * y)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'prims.convert_element_type.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(prims.convert_element_type.default)[call_function]:Tensor(c64[512, 513, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(prims::convert_element_type.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'prims.convert_element_type.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: prims.convert_element_type.default. \nONNX Node: prims_convert_element_type[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(prims.convert_element_type.default)[call_function]:Tensor(c64[512, 513, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(prims::convert_element_type.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 513, 7])`,\n)\n- onnx_kwargs: Dict[length=1](\ndtype: 14,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(prims_convert_element_type)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(prims_convert_element_type)`",
      "text":"FX Node: prims.convert_element_type.default. \nONNX Node: prims_convert_element_type[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:prims.convert_element_type.default[name=convert_element_type_default_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(prims.convert_element_type.default)[call_function]:Tensor(c64[512, 513, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_heads_ISTFTHead)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=12](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__head___out_1: `TorchScriptTensor(f32[512, 7, 1026])`,\ntranspose_19: `TorchScriptTensor(f32[512, 1026, 7])`,\nsplit: `TorchScriptTensor()`,\ngetitem_30: `TorchScriptTensor(f32[512, 513, 7])`,\ngetitem_31: `TorchScriptTensor(f32[512, 513, 7])`,\nexp: `TorchScriptTensor(f32[512, 513, 7])`,\nclamp: `TorchScriptTensor(f32[512, 513, 7])`,\ncos: `TorchScriptTensor(f32[512, 513, 7])`,\nsin: `TorchScriptTensor(f32[512, 513, 7])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 67, in forward\n    S = mag * (x + 1j * y)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:prims.convert_element_type.default[name=convert_element_type_default_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(c64[512, 513, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=True),\n)",
      "text":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.add.Tensor. \nONNX Node: aten_add_complex[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(c64[512, 513, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=True),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 513, 7, 2])`,\n`TorchScriptTensor(f32[512, 513, 7, 2])`,\n)\n- onnx_kwargs: Dict[length=1](\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_add_complex)`\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_add_complex)`",
      "text":"FX Node: aten.add.Tensor. \nONNX Node: aten_add_complex[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.add.Tensor[name=add_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(c64[512, 513, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_heads_ISTFTHead)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=13](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__head___out_1: `TorchScriptTensor(f32[512, 7, 1026])`,\ntranspose_19: `TorchScriptTensor(f32[512, 1026, 7])`,\nsplit: `TorchScriptTensor()`,\ngetitem_30: `TorchScriptTensor(f32[512, 513, 7])`,\ngetitem_31: `TorchScriptTensor(f32[512, 513, 7])`,\nexp: `TorchScriptTensor(f32[512, 513, 7])`,\nclamp: `TorchScriptTensor(f32[512, 513, 7])`,\ncos: `TorchScriptTensor(f32[512, 513, 7])`,\nsin: `TorchScriptTensor(f32[512, 513, 7])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 67, in forward\n    S = mag * (x + 1j * y)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.add.Tensor[name=add_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'prims.convert_element_type.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(prims.convert_element_type.default)[call_function]:Tensor(c64[512, 513, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(prims::convert_element_type.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'prims.convert_element_type.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: prims.convert_element_type.default. \nONNX Node: prims_convert_element_type[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(prims.convert_element_type.default)[call_function]:Tensor(c64[512, 513, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(prims::convert_element_type.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[512, 513, 7])`,\n)\n- onnx_kwargs: Dict[length=1](\ndtype: 14,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(prims_convert_element_type)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(prims_convert_element_type)`",
      "text":"FX Node: prims.convert_element_type.default. \nONNX Node: prims_convert_element_type[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:prims.convert_element_type.default[name=convert_element_type_default_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(prims.convert_element_type.default)[call_function]:Tensor(c64[512, 513, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_heads_ISTFTHead)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=14](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__head___out_1: `TorchScriptTensor(f32[512, 7, 1026])`,\ntranspose_19: `TorchScriptTensor(f32[512, 1026, 7])`,\nsplit: `TorchScriptTensor()`,\ngetitem_30: `TorchScriptTensor(f32[512, 513, 7])`,\ngetitem_31: `TorchScriptTensor(f32[512, 513, 7])`,\nexp: `TorchScriptTensor(f32[512, 513, 7])`,\nclamp: `TorchScriptTensor(f32[512, 513, 7])`,\ncos: `TorchScriptTensor(f32[512, 513, 7])`,\nsin: `TorchScriptTensor(f32[512, 513, 7])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 67, in forward\n    S = mag * (x + 1j * y)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:prims.convert_element_type.default[name=convert_element_type_default_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(c64[512, 513, 7])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=True),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul_complex[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(c64[512, 513, 7])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=True),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 513, 7, 2])`,\n`TorchScriptTensor(f32[512, 513, 7, 2])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_complex)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul_complex)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul_complex[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(c64[512, 513, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_heads_ISTFTHead)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=15](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__head___out_1: `TorchScriptTensor(f32[512, 7, 1026])`,\ntranspose_19: `TorchScriptTensor(f32[512, 1026, 7])`,\nsplit: `TorchScriptTensor()`,\ngetitem_30: `TorchScriptTensor(f32[512, 513, 7])`,\ngetitem_31: `TorchScriptTensor(f32[512, 513, 7])`,\nexp: `TorchScriptTensor(f32[512, 513, 7])`,\nclamp: `TorchScriptTensor(f32[512, 513, 7])`,\ncos: `TorchScriptTensor(f32[512, 513, 7])`,\nsin: `TorchScriptTensor(f32[512, 513, 7])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 67, in forward\n    S = mag * (x + 1j * y)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:mul_9[name=mul_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(mul_9)[placeholder]:Tensor(c64[512, 513, 7])\n- fx_graph_module: torch.fx.GraphModule(vocos_spectral_ops_ISTFT)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 67, in forward\n    S = mag * (x + 1j * y)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:mul_9[name=mul_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(c64[512, 7, 513])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=True),\n)",
      "text":"Searching operator overload: 'aten.transpose.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose_complex[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(c64[512, 7, 513])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::transpose.int, is_custom=False, is_complex=True),\n)\n- onnx_args: Tuple[length=3](\n`TorchScriptTensor(f32[512, 513, 7, 2])`,\n1,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_transpose_complex)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_transpose_complex)`",
      "text":"FX Node: aten.transpose.int. \nONNX Node: aten_transpose_complex[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.transpose.int[name=transpose_20]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.transpose.int)[call_function]:Tensor(c64[512, 7, 513])\n- fx_graph_module: torch.fx.GraphModule(vocos_spectral_ops_ISTFT)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nmul_9: `TorchScriptTensor(f32[512, 513, 7, 2])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 68, in forward\n    audio = self.istft(S)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/spectral_ops.py\", line 46, in forward\n    return torch.istft(spec, self.n_fft, self.hop_length, self.win_length, self.window, center=True)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.transpose.int[name=transpose_20]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._fft_c2r.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._fft_c2r.default)[call_function]:Tensor(f32[512, 7, 1024])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_fft_c2r.default, is_custom=False, is_complex=True),\n)",
      "text":"Searching operator overload: 'aten._fft_c2r.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._fft_c2r.default. \nONNX Node: aten__fft_c2r[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._fft_c2r.default)[call_function]:Tensor(f32[512, 7, 1024])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_fft_c2r.default, is_custom=False, is_complex=True),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[512, 7, 513, 2])`,\nList[length=1](\n2,\n),\n2,\n1024,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__fft_c2r)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten__fft_c2r)`",
      "text":"FX Node: aten._fft_c2r.default. \nONNX Node: aten__fft_c2r[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._fft_c2r.default[name=_fft_c2r]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._fft_c2r.default)[call_function]:Tensor(f32[512, 7, 1024])\n- fx_graph_module: torch.fx.GraphModule(vocos_spectral_ops_ISTFT)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nmul_9: `TorchScriptTensor(f32[512, 513, 7, 2])`,\ntranspose_20: `TorchScriptTensor(f32[512, 7, 513, 2])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 68, in forward\n    audio = self.istft(S)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/spectral_ops.py\", line 46, in forward\n    return torch.istft(spec, self.n_fft, self.hop_length, self.win_length, self.window, center=True)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._fft_c2r.default[name=_fft_c2r]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:head/istft/window[name=head_istft_window]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(head/istft/window)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(vocos_spectral_ops_ISTFT)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nmul_9: `TorchScriptTensor(f32[512, 513, 7, 2])`,\ntranspose_20: `TorchScriptTensor(f32[512, 7, 513, 2])`,\n_fft_c2r: `TorchScriptTensor(f32[512, 7, 1024])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 68, in forward\n    audio = self.istft(S)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/spectral_ops.py\", line 46, in forward\n    return torch.istft(spec, self.n_fft, self.hop_length, self.win_length, self.window, center=True)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:head/istft/window[name=head_istft_window]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[1, 1, 1024])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[1, 1, 1024])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1024])`,\nList[length=3](\n1,\n1,\n1024,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_34]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[1, 1, 1024])\n- fx_graph_module: torch.fx.GraphModule(vocos_spectral_ops_ISTFT)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nmul_9: `TorchScriptTensor(f32[512, 513, 7, 2])`,\ntranspose_20: `TorchScriptTensor(f32[512, 7, 513, 2])`,\n_fft_c2r: `TorchScriptTensor(f32[512, 7, 1024])`,\nhead_istft_window: `TorchScriptTensor(f32[1024])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 68, in forward\n    audio = self.istft(S)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/spectral_ops.py\", line 46, in forward\n    return torch.istft(spec, self.n_fft, self.hop_length, self.win_length, self.window, center=True)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_34]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 1024])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 1024])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 1024])`,\n`TorchScriptTensor(f32[1, 1, 1024])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_bool)`\n### Failed: input type mismatch for input 'self'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\n### Failed: input type mismatch for input 'other'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\nmatch score: 0\n## Checking perfect match...\n`OnnxFunction(aten_mul)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul_10]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[512, 7, 1024])\n- fx_graph_module: torch.fx.GraphModule(vocos_spectral_ops_ISTFT)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nmul_9: `TorchScriptTensor(f32[512, 513, 7, 2])`,\ntranspose_20: `TorchScriptTensor(f32[512, 7, 513, 2])`,\n_fft_c2r: `TorchScriptTensor(f32[512, 7, 1024])`,\nhead_istft_window: `TorchScriptTensor(f32[1024])`,\nview_34: `TorchScriptTensor(f32[1, 1, 1024])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 68, in forward\n    audio = self.istft(S)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/spectral_ops.py\", line 46, in forward\n    return torch.istft(spec, self.n_fft, self.hop_length, self.win_length, self.window, center=True)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul_10]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.arange.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.arange.default)[call_function]:Tensor(i32[2560])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::arange.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.arange.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.arange.default. \nONNX Node: aten_arange[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.arange.default)[call_function]:Tensor(i32[2560])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::arange.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n2560,\n)\n- onnx_kwargs: Dict[length=1](\ndtype: 6,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_arange)`\n### Failed: attribute 'end' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: -1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_arange)`",
      "text":"FX Node: aten.arange.default. \nONNX Node: aten_arange[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.arange.default[name=arange]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.arange.default)[call_function]:Tensor(i32[2560])\n- fx_graph_module: torch.fx.GraphModule(vocos_spectral_ops_ISTFT)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nmul_9: `TorchScriptTensor(f32[512, 513, 7, 2])`,\ntranspose_20: `TorchScriptTensor(f32[512, 7, 513, 2])`,\n_fft_c2r: `TorchScriptTensor(f32[512, 7, 1024])`,\nhead_istft_window: `TorchScriptTensor(f32[1024])`,\nview_34: `TorchScriptTensor(f32[1, 1, 1024])`,\nmul_10: `TorchScriptTensor(f32[512, 7, 1024])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 68, in forward\n    audio = self.istft(S)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/spectral_ops.py\", line 46, in forward\n    return torch.istft(spec, self.n_fft, self.hop_length, self.win_length, self.window, center=True)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.arange.default[name=arange]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.unfold.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.unfold.default)[call_function]:Tensor(i32[7, 1024])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::unfold.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.unfold.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.unfold.default. \nONNX Node: aten_unfold[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.unfold.default)[call_function]:Tensor(i32[7, 1024])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::unfold.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(i32[2560])`,\n0,\n1024,\n256,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_unfold)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_unfold)`",
      "text":"FX Node: aten.unfold.default. \nONNX Node: aten_unfold[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.unfold.default[name=unfold]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.unfold.default)[call_function]:Tensor(i32[7, 1024])\n- fx_graph_module: torch.fx.GraphModule(vocos_spectral_ops_ISTFT)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nmul_9: `TorchScriptTensor(f32[512, 513, 7, 2])`,\ntranspose_20: `TorchScriptTensor(f32[512, 7, 513, 2])`,\n_fft_c2r: `TorchScriptTensor(f32[512, 7, 1024])`,\nhead_istft_window: `TorchScriptTensor(f32[1024])`,\nview_34: `TorchScriptTensor(f32[1, 1, 1024])`,\nmul_10: `TorchScriptTensor(f32[512, 7, 1024])`,\narange: `TorchScriptTensor(i32[2560])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 68, in forward\n    audio = self.istft(S)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/spectral_ops.py\", line 46, in forward\n    return torch.istft(spec, self.n_fft, self.hop_length, self.win_length, self.window, center=True)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.unfold.default[name=unfold]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.clone.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.clone.default)[call_function]:Tensor(i32[7, 1024])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::clone.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.clone.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.clone.default. \nONNX Node: aten_clone[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.clone.default)[call_function]:Tensor(i32[7, 1024])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::clone.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(i32[7, 1024])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_clone)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_clone)`",
      "text":"FX Node: aten.clone.default. \nONNX Node: aten_clone[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.clone.default[name=clone]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.clone.default)[call_function]:Tensor(i32[7, 1024])\n- fx_graph_module: torch.fx.GraphModule(vocos_spectral_ops_ISTFT)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\nmul_9: `TorchScriptTensor(f32[512, 513, 7, 2])`,\ntranspose_20: `TorchScriptTensor(f32[512, 7, 513, 2])`,\n_fft_c2r: `TorchScriptTensor(f32[512, 7, 1024])`,\nhead_istft_window: `TorchScriptTensor(f32[1024])`,\nview_34: `TorchScriptTensor(f32[1, 1, 1024])`,\nmul_10: `TorchScriptTensor(f32[512, 7, 1024])`,\narange: `TorchScriptTensor(i32[2560])`,\nunfold: `TorchScriptTensor(i32[7, 1024])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 68, in forward\n    audio = self.istft(S)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/spectral_ops.py\", line 46, in forward\n    return torch.istft(spec, self.n_fft, self.hop_length, self.win_length, self.window, center=True)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.clone.default[name=clone]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._unsafe_view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._unsafe_view.default)[call_function]:Tensor(i32[7168])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_unsafe_view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._unsafe_view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._unsafe_view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._unsafe_view.default)[call_function]:Tensor(i32[7168])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_unsafe_view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(i32[7, 1024])`,\nList[length=1](\n7168,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten._unsafe_view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._unsafe_view.default[name=_unsafe_view]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._unsafe_view.default)[call_function]:Tensor(i32[7168])\n- fx_graph_module: torch.fx.GraphModule(vocos_spectral_ops_ISTFT)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=9](\nmul_9: `TorchScriptTensor(f32[512, 513, 7, 2])`,\ntranspose_20: `TorchScriptTensor(f32[512, 7, 513, 2])`,\n_fft_c2r: `TorchScriptTensor(f32[512, 7, 1024])`,\nhead_istft_window: `TorchScriptTensor(f32[1024])`,\nview_34: `TorchScriptTensor(f32[1, 1, 1024])`,\nmul_10: `TorchScriptTensor(f32[512, 7, 1024])`,\narange: `TorchScriptTensor(i32[2560])`,\nunfold: `TorchScriptTensor(i32[7, 1024])`,\nclone: `TorchScriptTensor(i32[7, 1024])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 68, in forward\n    audio = self.istft(S)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/spectral_ops.py\", line 46, in forward\n    return torch.istft(spec, self.n_fft, self.hop_length, self.win_length, self.window, center=True)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._unsafe_view.default[name=_unsafe_view]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.permute.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.permute.default)[call_function]:Tensor(f32[512, 7, 1024])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::permute.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.permute.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.permute.default. \nONNX Node: aten_permute[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.permute.default)[call_function]:Tensor(f32[512, 7, 1024])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::permute.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 1024])`,\nList[length=3](\n0,\n1,\n2,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_permute)`\nmatch score: 0\n## Return values\n`TracedOnnxFunction(aten_permute)`",
      "text":"FX Node: aten.permute.default. \nONNX Node: aten_permute[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.permute.default[name=permute]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.permute.default)[call_function]:Tensor(f32[512, 7, 1024])\n- fx_graph_module: torch.fx.GraphModule(vocos_spectral_ops_ISTFT)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=10](\nmul_9: `TorchScriptTensor(f32[512, 513, 7, 2])`,\ntranspose_20: `TorchScriptTensor(f32[512, 7, 513, 2])`,\n_fft_c2r: `TorchScriptTensor(f32[512, 7, 1024])`,\nhead_istft_window: `TorchScriptTensor(f32[1024])`,\nview_34: `TorchScriptTensor(f32[1, 1, 1024])`,\nmul_10: `TorchScriptTensor(f32[512, 7, 1024])`,\narange: `TorchScriptTensor(i32[2560])`,\nunfold: `TorchScriptTensor(i32[7, 1024])`,\nclone: `TorchScriptTensor(i32[7, 1024])`,\n_unsafe_view: `TorchScriptTensor(i32[7168])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 68, in forward\n    audio = self.istft(S)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/spectral_ops.py\", line 46, in forward\n    return torch.istft(spec, self.n_fft, self.hop_length, self.win_length, self.window, center=True)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.permute.default[name=permute]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.view.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7168])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.view.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7168])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::view.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7, 1024])`,\nList[length=2](\n512,\n7168,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_view)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_view)`",
      "text":"FX Node: aten.view.default. \nONNX Node: aten_view[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.view.default[name=view_35]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.view.default)[call_function]:Tensor(f32[512, 7168])\n- fx_graph_module: torch.fx.GraphModule(vocos_spectral_ops_ISTFT)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=11](\nmul_9: `TorchScriptTensor(f32[512, 513, 7, 2])`,\ntranspose_20: `TorchScriptTensor(f32[512, 7, 513, 2])`,\n_fft_c2r: `TorchScriptTensor(f32[512, 7, 1024])`,\nhead_istft_window: `TorchScriptTensor(f32[1024])`,\nview_34: `TorchScriptTensor(f32[1, 1, 1024])`,\nmul_10: `TorchScriptTensor(f32[512, 7, 1024])`,\narange: `TorchScriptTensor(i32[2560])`,\nunfold: `TorchScriptTensor(i32[7, 1024])`,\nclone: `TorchScriptTensor(i32[7, 1024])`,\n_unsafe_view: `TorchScriptTensor(i32[7168])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 68, in forward\n    audio = self.istft(S)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/spectral_ops.py\", line 46, in forward\n    return torch.istft(spec, self.n_fft, self.hop_length, self.win_length, self.window, center=True)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.view.default[name=view_35]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.new_zeros.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.new_zeros.default)[call_function]:Tensor(f32[512, 2560])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::new_zeros.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.new_zeros.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.new_zeros.default. \nONNX Node: aten_new_zeros[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.new_zeros.default)[call_function]:Tensor(f32[512, 2560])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::new_zeros.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[512, 7168])`,\nList[length=2](\n512,\n2560,\n),\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_new_zeros)`\nmatch score: 2\n## Return values\n`TracedOnnxFunction(aten_new_zeros)`",
      "text":"FX Node: aten.new_zeros.default. \nONNX Node: aten_new_zeros[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.new_zeros.default[name=new_zeros]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.new_zeros.default)[call_function]:Tensor(f32[512, 2560])\n- fx_graph_module: torch.fx.GraphModule(vocos_spectral_ops_ISTFT)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=12](\nmul_9: `TorchScriptTensor(f32[512, 513, 7, 2])`,\ntranspose_20: `TorchScriptTensor(f32[512, 7, 513, 2])`,\n_fft_c2r: `TorchScriptTensor(f32[512, 7, 1024])`,\nhead_istft_window: `TorchScriptTensor(f32[1024])`,\nview_34: `TorchScriptTensor(f32[1, 1, 1024])`,\nmul_10: `TorchScriptTensor(f32[512, 7, 1024])`,\narange: `TorchScriptTensor(i32[2560])`,\nunfold: `TorchScriptTensor(i32[7, 1024])`,\nclone: `TorchScriptTensor(i32[7, 1024])`,\n_unsafe_view: `TorchScriptTensor(i32[7168])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 68, in forward\n    audio = self.istft(S)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/spectral_ops.py\", line 46, in forward\n    return torch.istft(spec, self.n_fft, self.hop_length, self.win_length, self.window, center=True)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.new_zeros.default[name=new_zeros]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._unsafe_index_put.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._unsafe_index_put.default)[call_function]:Tensor(f32[512, 2560])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_unsafe_index_put.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._unsafe_index_put.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._unsafe_index_put.default. \nONNX Node: aten_index_put[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._unsafe_index_put.default)[call_function]:Tensor(f32[512, 2560])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_unsafe_index_put.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[512, 2560])`,\nList[length=2](\n<class 'NoneType'>,\n`TorchScriptTensor(i32[7168])`,\n),\n`TorchScriptTensor(f32[512, 7168])`,\nTrue,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_index_put)`\n### Failed: input type mismatch for input 'indices'!\nActual {'seq(tensor(int32))'} vs\nExpected {'seq(tensor(int64))'}\nmatch score: 2\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`OnnxFunction(aten_index_put)`",
      "text":"FX Node: aten._unsafe_index_put.default. \nONNX Node: aten_index_put[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._unsafe_index_put.default[name=_unsafe_index_put]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._unsafe_index_put.default)[call_function]:Tensor(f32[512, 2560])\n- fx_graph_module: torch.fx.GraphModule(vocos_spectral_ops_ISTFT)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=13](\nmul_9: `TorchScriptTensor(f32[512, 513, 7, 2])`,\ntranspose_20: `TorchScriptTensor(f32[512, 7, 513, 2])`,\n_fft_c2r: `TorchScriptTensor(f32[512, 7, 1024])`,\nhead_istft_window: `TorchScriptTensor(f32[1024])`,\nview_34: `TorchScriptTensor(f32[1, 1, 1024])`,\nmul_10: `TorchScriptTensor(f32[512, 7, 1024])`,\narange: `TorchScriptTensor(i32[2560])`,\nunfold: `TorchScriptTensor(i32[7, 1024])`,\nclone: `TorchScriptTensor(i32[7, 1024])`,\n_unsafe_view: `TorchScriptTensor(i32[7168])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 68, in forward\n    audio = self.istft(S)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/spectral_ops.py\", line 46, in forward\n    return torch.istft(spec, self.n_fft, self.hop_length, self.win_length, self.window, center=True)\n\n```\n## Exception log\n```\nTraceback (most recent call last):\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 440, in run_node\n    self.call_function(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 656, in call_function\n    ) = symbolic_fn(*onnx_args, **onnx_kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/values.py\", line 529, in __call__\n    return evaluator.default().eval_function(self, args, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 425, in eval_function\n    return self._graph.add_function_call(function, inputs, attributes)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 908, in add_function_call\n    result = self._add_torchscript_op_call(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 761, in _add_torchscript_op_call\n    graph_inputs.append(self._add_constant_to_graph(input))\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 721, in _add_constant_to_graph\n    raise TypeError(\n\nTypeError: Constant input '[None, _unsafe_view defined in (%_unsafe_view : Int(7168) = onnx::Reshape[allowzero=0](%clone, %_val_33)\n)]' of type '<class 'list'>' is not supported\n\n```",
      "text":"FX Node: call_function:aten._unsafe_index_put.default[name=_unsafe_index_put]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"error",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: vocos_spectral_ops_ISTFT. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(vocos_spectral_ops_ISTFT)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Exception log\n```\nTraceback (most recent call last):\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 537, in run\n    self.run_node(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 146, in wrapper\n    ctx.log_and_raise_if_error(diag)\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/context.py\", line 355, in log_and_raise_if_error\n    raise diagnostic.source_exception\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 440, in run_node\n    self.call_function(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 656, in call_function\n    ) = symbolic_fn(*onnx_args, **onnx_kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/values.py\", line 529, in __call__\n    return evaluator.default().eval_function(self, args, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 425, in eval_function\n    return self._graph.add_function_call(function, inputs, attributes)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 908, in add_function_call\n    result = self._add_torchscript_op_call(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 761, in _add_torchscript_op_call\n    graph_inputs.append(self._add_constant_to_graph(input))\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 721, in _add_constant_to_graph\n    raise TypeError(\n\nTypeError: Constant input '[None, _unsafe_view defined in (%_unsafe_view : Int(7168) = onnx::Reshape[allowzero=0](%clone, %_val_33)\n)]' of type '<class 'list'>' is not supported\n\n```",
      "text":"FX Graph: vocos_spectral_ops_ISTFT. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"error",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:L__vocos____modules__head___istft_1[name=l__vocos____modules__head___istft_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(L__vocos____modules__head___istft_1)[call_module]:Tensor(f32[512, 1536])\n- fx_graph_module: torch.fx.GraphModule(vocos_heads_ISTFTHead)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=16](\ngetitem_27: `TorchScriptTensor(f32[512, 7, 512])`,\nl__vocos____modules__head___out_1: `TorchScriptTensor(f32[512, 7, 1026])`,\ntranspose_19: `TorchScriptTensor(f32[512, 1026, 7])`,\nsplit: `TorchScriptTensor()`,\ngetitem_30: `TorchScriptTensor(f32[512, 513, 7])`,\ngetitem_31: `TorchScriptTensor(f32[512, 513, 7])`,\nexp: `TorchScriptTensor(f32[512, 513, 7])`,\nclamp: `TorchScriptTensor(f32[512, 513, 7])`,\ncos: `TorchScriptTensor(f32[512, 513, 7])`,\nsin: `TorchScriptTensor(f32[512, 513, 7])`,\n...\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 68, in forward\n    audio = self.istft(S)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/spectral_ops.py\", line 46, in forward\n    return torch.istft(spec, self.n_fft, self.hop_length, self.win_length, self.window, center=True)\n\n```\n## Exception log\n```\nTraceback (most recent call last):\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 450, in run_node\n    self.call_module(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 738, in call_module\n    sub_onnxscript_graph = self.run(\n                           ^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 146, in wrapper\n    ctx.log_and_raise_if_error(diag)\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/context.py\", line 355, in log_and_raise_if_error\n    raise diagnostic.source_exception\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 537, in run\n    self.run_node(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 146, in wrapper\n    ctx.log_and_raise_if_error(diag)\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/context.py\", line 355, in log_and_raise_if_error\n    raise diagnostic.source_exception\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 440, in run_node\n    self.call_function(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 656, in call_function\n    ) = symbolic_fn(*onnx_args, **onnx_kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/values.py\", line 529, in __call__\n    return evaluator.default().eval_function(self, args, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 425, in eval_function\n    return self._graph.add_function_call(function, inputs, attributes)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 908, in add_function_call\n    result = self._add_torchscript_op_call(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 761, in _add_torchscript_op_call\n    graph_inputs.append(self._add_constant_to_graph(input))\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 721, in _add_constant_to_graph\n    raise TypeError(\n\nTypeError: Constant input '[None, _unsafe_view defined in (%_unsafe_view : Int(7168) = onnx::Reshape[allowzero=0](%clone, %_val_33)\n)]' of type '<class 'list'>' is not supported\n\n```",
      "text":"FX Node: call_module:L__vocos____modules__head___istft_1[name=l__vocos____modules__head___istft_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"error",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: vocos_heads_ISTFTHead. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(vocos_heads_ISTFTHead)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Exception log\n```\nTraceback (most recent call last):\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 537, in run\n    self.run_node(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 146, in wrapper\n    ctx.log_and_raise_if_error(diag)\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/context.py\", line 355, in log_and_raise_if_error\n    raise diagnostic.source_exception\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 450, in run_node\n    self.call_module(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 738, in call_module\n    sub_onnxscript_graph = self.run(\n                           ^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 146, in wrapper\n    ctx.log_and_raise_if_error(diag)\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/context.py\", line 355, in log_and_raise_if_error\n    raise diagnostic.source_exception\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 537, in run\n    self.run_node(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 146, in wrapper\n    ctx.log_and_raise_if_error(diag)\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/context.py\", line 355, in log_and_raise_if_error\n    raise diagnostic.source_exception\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 440, in run_node\n    self.call_function(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 656, in call_function\n    ) = symbolic_fn(*onnx_args, **onnx_kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/values.py\", line 529, in __call__\n    return evaluator.default().eval_function(self, args, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 425, in eval_function\n    return self._graph.add_function_call(function, inputs, attributes)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 908, in add_function_call\n    result = self._add_torchscript_op_call(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 761, in _add_torchscript_op_call\n    graph_inputs.append(self._add_constant_to_graph(input))\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 721, in _add_constant_to_graph\n    raise TypeError(\n\nTypeError: Constant input '[None, _unsafe_view defined in (%_unsafe_view : Int(7168) = onnx::Reshape[allowzero=0](%clone, %_val_33)\n)]' of type '<class 'list'>' is not supported\n\n```",
      "text":"FX Graph: vocos_heads_ISTFTHead. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"error",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:vocos____modules__head_1[name=vocos____modules__head_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(vocos____modules__head_1)[call_module]:Tensor(f32[512, 1536])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nl_x_: `TorchScriptTensor(f32[512, 100, 7])`,\nvocos____modules__backbone_1: `TorchScriptTensor(f32[512, 7, 512])`,\n)\n## PyTorch source information\n```\n  File \"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py\", line 28, in forward\n    return vocos.decode(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/pretrained.py\", line 113, in decode\n    audio_output = self.head(x)\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/vocos/heads.py\", line 55, in forward\n    x = self.out(x).transpose(1, 2)\n\n```\n## Exception log\n```\nTraceback (most recent call last):\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 450, in run_node\n    self.call_module(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 738, in call_module\n    sub_onnxscript_graph = self.run(\n                           ^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 146, in wrapper\n    ctx.log_and_raise_if_error(diag)\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/context.py\", line 355, in log_and_raise_if_error\n    raise diagnostic.source_exception\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 537, in run\n    self.run_node(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 146, in wrapper\n    ctx.log_and_raise_if_error(diag)\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/context.py\", line 355, in log_and_raise_if_error\n    raise diagnostic.source_exception\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 450, in run_node\n    self.call_module(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 738, in call_module\n    sub_onnxscript_graph = self.run(\n                           ^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 146, in wrapper\n    ctx.log_and_raise_if_error(diag)\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/context.py\", line 355, in log_and_raise_if_error\n    raise diagnostic.source_exception\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 537, in run\n    self.run_node(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 146, in wrapper\n    ctx.log_and_raise_if_error(diag)\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/context.py\", line 355, in log_and_raise_if_error\n    raise diagnostic.source_exception\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 440, in run_node\n    self.call_function(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 656, in call_function\n    ) = symbolic_fn(*onnx_args, **onnx_kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/values.py\", line 529, in __call__\n    return evaluator.default().eval_function(self, args, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 425, in eval_function\n    return self._graph.add_function_call(function, inputs, attributes)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 908, in add_function_call\n    result = self._add_torchscript_op_call(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 761, in _add_torchscript_op_call\n    graph_inputs.append(self._add_constant_to_graph(input))\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 721, in _add_constant_to_graph\n    raise TypeError(\n\nTypeError: Constant input '[None, _unsafe_view defined in (%_unsafe_view : Int(7168) = onnx::Reshape[allowzero=0](%clone, %_val_33)\n)]' of type '<class 'list'>' is not supported\n\n```",
      "text":"FX Node: call_module:vocos____modules__head_1[name=vocos____modules__head_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"error",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/onnx/convert_vocos.py"
        },
        "region":{
         "snippet":{
          "text":"return vocos.decode(x)"
         },
         "startLine":28
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: . \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n## Exception log\n```\nTraceback (most recent call last):\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 537, in run\n    self.run_node(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 146, in wrapper\n    ctx.log_and_raise_if_error(diag)\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/context.py\", line 355, in log_and_raise_if_error\n    raise diagnostic.source_exception\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 450, in run_node\n    self.call_module(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 738, in call_module\n    sub_onnxscript_graph = self.run(\n                           ^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 146, in wrapper\n    ctx.log_and_raise_if_error(diag)\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/context.py\", line 355, in log_and_raise_if_error\n    raise diagnostic.source_exception\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 537, in run\n    self.run_node(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 146, in wrapper\n    ctx.log_and_raise_if_error(diag)\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/context.py\", line 355, in log_and_raise_if_error\n    raise diagnostic.source_exception\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 450, in run_node\n    self.call_module(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 738, in call_module\n    sub_onnxscript_graph = self.run(\n                           ^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 146, in wrapper\n    ctx.log_and_raise_if_error(diag)\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/context.py\", line 355, in log_and_raise_if_error\n    raise diagnostic.source_exception\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 537, in run\n    self.run_node(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 146, in wrapper\n    ctx.log_and_raise_if_error(diag)\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/context.py\", line 355, in log_and_raise_if_error\n    raise diagnostic.source_exception\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 440, in run_node\n    self.call_function(\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py\", line 656, in call_function\n    ) = symbolic_fn(*onnx_args, **onnx_kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/values.py\", line 529, in __call__\n    return evaluator.default().eval_function(self, args, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 425, in eval_function\n    return self._graph.add_function_call(function, inputs, attributes)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 908, in add_function_call\n    result = self._add_torchscript_op_call(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 761, in _add_torchscript_op_call\n    graph_inputs.append(self._add_constant_to_graph(input))\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/onnxscript/function_libs/torch_lib/graph_building/_graph_building_torch.py\", line 721, in _add_constant_to_graph\n    raise TypeError(\n\nTypeError: Constant input '[None, _unsafe_view defined in (%_unsafe_view : Int(7168) = onnx::Reshape[allowzero=0](%clone, %_val_33)\n)]' of type '<class 'list'>' is not supported\n\n```",
      "text":"FX Graph: . "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"error",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/ubuntu/projects/f5-tts/venv/lib/python3.12/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    }
   ]
  }
 ],
 "version":"2.1.0",
 "schemaUri":"https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/schemas/sarif-schema-2.1.0.json"
}